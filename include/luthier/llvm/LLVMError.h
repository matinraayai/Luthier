//===-- LLVMError.h ------------------------------------------*- C++ -*----===//
// Copyright 2022-2025 @ Northeastern University Computer Architecture Lab
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
///
/// \file
/// This file implements an \c llvm::ErrorInfo that consumes errors
/// generated by LLVM and generates a more verbose error message.
//===----------------------------------------------------------------------===//
#ifndef LUTHIER_ERROR_LLVM_ERROR_H
#define LUTHIER_ERROR_LLVM_ERROR_H
#include <llvm/Support/Error.h>

namespace luthier {

/// \brief ErrorInfo used to consume \c llvm::Error encountered in calls to the
/// LLVM library and return a new \c llvm::Error with the original error message
/// and line info/stack trace of where it was encountered for easier debugging
class LLVMError final : public llvm::ErrorInfo<LLVMError> {
public:
  static char ID;               ///< ID of the Error
  const std::string File;       ///< Path to the file the error was encountered
  const int LineNumber;         ///< Line number of the file the error was
                                ///< encountered
  const std::string StackTrace; ///< Stack trace of where the error occurred
  const std::string OriginalErrorMsg; ///< Original LLVM Error message

  LLVMError(const llvm::StringRef File, const int LineNumber,
            const llvm::StringRef StackTrace,
            const llvm::StringRef OriginalErrorMsg)
      : File(File), LineNumber(LineNumber), StackTrace(StackTrace),
        OriginalErrorMsg(OriginalErrorMsg) {}

  static llvm::Error llvmErrorCheck(llvm::Error Expr, llvm::StringRef File,
                                    int LineNumber);

  void log(llvm::raw_ostream &OS) const override;

  [[nodiscard]] std::error_code convertToErrorCode() const override {
    llvm_unreachable("Not implemented");
  }
};

/// \brief Macro used to check an \c llvm::Error and on error, wraps its
/// original error message inside a \c luthier::LLVMError to provide a more
/// helpful error message
#define LLVM_ERROR_CHECK(Expr)                                                 \
  luthier::LLVMError::llvmErrorCheck(std::move(Expr), __FILE__, __LINE__)

} // namespace luthier
#endif