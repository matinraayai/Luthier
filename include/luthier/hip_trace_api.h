// NOLINTBEGIN
/* Generated by hip_intercept_gen.py. DO NOT EDIT!*/
#ifndef LUTHIER_HIP_API_TRACE_H
#define LUTHIER_HIP_API_TRACE_H
#include <hip/amd_detail/hip_api_trace.hpp>
#include "luthier/types.h"

namespace luthier::hip {

struct Dim3 {
  uint32_t x;
  uint32_t y;
  uint32_t z;
};
  
enum ApiEvtID : unsigned int {
  // Compiler API
  HIP_COMPILER_API_EVT_ID_FIRST = 0,
  HIP_COMPILER_API_EVT_ID___hipPopCallConfiguration = 0, 
  HIP_COMPILER_API_EVT_ID___hipPushCallConfiguration = 1, 
  HIP_COMPILER_API_EVT_ID___hipRegisterFatBinary = 2, 
  HIP_COMPILER_API_EVT_ID___hipRegisterFunction = 3, 
  HIP_COMPILER_API_EVT_ID___hipRegisterManagedVar = 4, 
  HIP_COMPILER_API_EVT_ID___hipRegisterSurface = 5, 
  HIP_COMPILER_API_EVT_ID___hipRegisterTexture = 6, 
  HIP_COMPILER_API_EVT_ID___hipRegisterVar = 7, 
  HIP_COMPILER_API_EVT_ID___hipUnregisterFatBinary = 8, 
  HIP_COMPILER_API_EVT_ID_LAST = 8, 
  // Runtime API
  HIP_RUNTIME_API_EVT_ID_FIRST = 9,
  HIP_RUNTIME_API_EVT_ID_hipApiName = 9, 
  HIP_RUNTIME_API_EVT_ID_hipArray3DCreate = 10, 
  HIP_RUNTIME_API_EVT_ID_hipArray3DGetDescriptor = 11, 
  HIP_RUNTIME_API_EVT_ID_hipArrayCreate = 12, 
  HIP_RUNTIME_API_EVT_ID_hipArrayDestroy = 13, 
  HIP_RUNTIME_API_EVT_ID_hipArrayGetDescriptor = 14, 
  HIP_RUNTIME_API_EVT_ID_hipArrayGetInfo = 15, 
  HIP_RUNTIME_API_EVT_ID_hipBindTexture = 16, 
  HIP_RUNTIME_API_EVT_ID_hipBindTexture2D = 17, 
  HIP_RUNTIME_API_EVT_ID_hipBindTextureToArray = 18, 
  HIP_RUNTIME_API_EVT_ID_hipBindTextureToMipmappedArray = 19, 
  HIP_RUNTIME_API_EVT_ID_hipChooseDevice = 20, 
  HIP_RUNTIME_API_EVT_ID_hipChooseDeviceR0000 = 21, 
  HIP_RUNTIME_API_EVT_ID_hipConfigureCall = 22, 
  HIP_RUNTIME_API_EVT_ID_hipCreateSurfaceObject = 23, 
  HIP_RUNTIME_API_EVT_ID_hipCreateTextureObject = 24, 
  HIP_RUNTIME_API_EVT_ID_hipCtxCreate = 25, 
  HIP_RUNTIME_API_EVT_ID_hipCtxDestroy = 26, 
  HIP_RUNTIME_API_EVT_ID_hipCtxDisablePeerAccess = 27, 
  HIP_RUNTIME_API_EVT_ID_hipCtxEnablePeerAccess = 28, 
  HIP_RUNTIME_API_EVT_ID_hipCtxGetApiVersion = 29, 
  HIP_RUNTIME_API_EVT_ID_hipCtxGetCacheConfig = 30, 
  HIP_RUNTIME_API_EVT_ID_hipCtxGetCurrent = 31, 
  HIP_RUNTIME_API_EVT_ID_hipCtxGetDevice = 32, 
  HIP_RUNTIME_API_EVT_ID_hipCtxGetFlags = 33, 
  HIP_RUNTIME_API_EVT_ID_hipCtxGetSharedMemConfig = 34, 
  HIP_RUNTIME_API_EVT_ID_hipCtxPopCurrent = 35, 
  HIP_RUNTIME_API_EVT_ID_hipCtxPushCurrent = 36, 
  HIP_RUNTIME_API_EVT_ID_hipCtxSetCacheConfig = 37, 
  HIP_RUNTIME_API_EVT_ID_hipCtxSetCurrent = 38, 
  HIP_RUNTIME_API_EVT_ID_hipCtxSetSharedMemConfig = 39, 
  HIP_RUNTIME_API_EVT_ID_hipCtxSynchronize = 40, 
  HIP_RUNTIME_API_EVT_ID_hipDestroyExternalMemory = 41, 
  HIP_RUNTIME_API_EVT_ID_hipDestroyExternalSemaphore = 42, 
  HIP_RUNTIME_API_EVT_ID_hipDestroySurfaceObject = 43, 
  HIP_RUNTIME_API_EVT_ID_hipDestroyTextureObject = 44, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceCanAccessPeer = 45, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceComputeCapability = 46, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceDisablePeerAccess = 47, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceEnablePeerAccess = 48, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGet = 49, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetAttribute = 50, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetByPCIBusId = 51, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetCacheConfig = 52, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetDefaultMemPool = 53, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetGraphMemAttribute = 54, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetLimit = 55, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetMemPool = 56, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetName = 57, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetP2PAttribute = 58, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetPCIBusId = 59, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetSharedMemConfig = 60, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetStreamPriorityRange = 61, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGetUuid = 62, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceGraphMemTrim = 63, 
  HIP_RUNTIME_API_EVT_ID_hipDevicePrimaryCtxGetState = 64, 
  HIP_RUNTIME_API_EVT_ID_hipDevicePrimaryCtxRelease = 65, 
  HIP_RUNTIME_API_EVT_ID_hipDevicePrimaryCtxReset = 66, 
  HIP_RUNTIME_API_EVT_ID_hipDevicePrimaryCtxRetain = 67, 
  HIP_RUNTIME_API_EVT_ID_hipDevicePrimaryCtxSetFlags = 68, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceReset = 69, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceSetCacheConfig = 70, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceSetGraphMemAttribute = 71, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceSetLimit = 72, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceSetMemPool = 73, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceSetSharedMemConfig = 74, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceSynchronize = 75, 
  HIP_RUNTIME_API_EVT_ID_hipDeviceTotalMem = 76, 
  HIP_RUNTIME_API_EVT_ID_hipDriverGetVersion = 77, 
  HIP_RUNTIME_API_EVT_ID_hipDrvGetErrorName = 78, 
  HIP_RUNTIME_API_EVT_ID_hipDrvGetErrorString = 79, 
  HIP_RUNTIME_API_EVT_ID_hipDrvGraphAddMemcpyNode = 80, 
  HIP_RUNTIME_API_EVT_ID_hipDrvMemcpy2DUnaligned = 81, 
  HIP_RUNTIME_API_EVT_ID_hipDrvMemcpy3D = 82, 
  HIP_RUNTIME_API_EVT_ID_hipDrvMemcpy3DAsync = 83, 
  HIP_RUNTIME_API_EVT_ID_hipDrvPointerGetAttributes = 84, 
  HIP_RUNTIME_API_EVT_ID_hipEventCreate = 85, 
  HIP_RUNTIME_API_EVT_ID_hipEventCreateWithFlags = 86, 
  HIP_RUNTIME_API_EVT_ID_hipEventDestroy = 87, 
  HIP_RUNTIME_API_EVT_ID_hipEventElapsedTime = 88, 
  HIP_RUNTIME_API_EVT_ID_hipEventQuery = 89, 
  HIP_RUNTIME_API_EVT_ID_hipEventRecord = 90, 
  HIP_RUNTIME_API_EVT_ID_hipEventSynchronize = 91, 
  HIP_RUNTIME_API_EVT_ID_hipExtGetLinkTypeAndHopCount = 92, 
  HIP_RUNTIME_API_EVT_ID_hipExtLaunchKernel = 93, 
  HIP_RUNTIME_API_EVT_ID_hipExtLaunchMultiKernelMultiDevice = 94, 
  HIP_RUNTIME_API_EVT_ID_hipExtMallocWithFlags = 95, 
  HIP_RUNTIME_API_EVT_ID_hipExtStreamCreateWithCUMask = 96, 
  HIP_RUNTIME_API_EVT_ID_hipExtStreamGetCUMask = 97, 
  HIP_RUNTIME_API_EVT_ID_hipExternalMemoryGetMappedBuffer = 98, 
  HIP_RUNTIME_API_EVT_ID_hipFree = 99, 
  HIP_RUNTIME_API_EVT_ID_hipFreeArray = 100, 
  HIP_RUNTIME_API_EVT_ID_hipFreeAsync = 101, 
  HIP_RUNTIME_API_EVT_ID_hipFreeHost = 102, 
  HIP_RUNTIME_API_EVT_ID_hipFreeMipmappedArray = 103, 
  HIP_RUNTIME_API_EVT_ID_hipFuncGetAttribute = 104, 
  HIP_RUNTIME_API_EVT_ID_hipFuncGetAttributes = 105, 
  HIP_RUNTIME_API_EVT_ID_hipFuncSetAttribute = 106, 
  HIP_RUNTIME_API_EVT_ID_hipFuncSetCacheConfig = 107, 
  HIP_RUNTIME_API_EVT_ID_hipFuncSetSharedMemConfig = 108, 
  HIP_RUNTIME_API_EVT_ID_hipGLGetDevices = 109, 
  HIP_RUNTIME_API_EVT_ID_hipGetChannelDesc = 110, 
  HIP_RUNTIME_API_EVT_ID_hipGetDevice = 111, 
  HIP_RUNTIME_API_EVT_ID_hipGetDeviceCount = 112, 
  HIP_RUNTIME_API_EVT_ID_hipGetDeviceFlags = 113, 
  HIP_RUNTIME_API_EVT_ID_hipGetDevicePropertiesR0600 = 114, 
  HIP_RUNTIME_API_EVT_ID_hipGetDevicePropertiesR0000 = 115, 
  HIP_RUNTIME_API_EVT_ID_hipGetErrorName = 116, 
  HIP_RUNTIME_API_EVT_ID_hipGetErrorString = 117, 
  HIP_RUNTIME_API_EVT_ID_hipGetLastError = 118, 
  HIP_RUNTIME_API_EVT_ID_hipGetMipmappedArrayLevel = 119, 
  HIP_RUNTIME_API_EVT_ID_hipGetSymbolAddress = 120, 
  HIP_RUNTIME_API_EVT_ID_hipGetSymbolSize = 121, 
  HIP_RUNTIME_API_EVT_ID_hipGetTextureAlignmentOffset = 122, 
  HIP_RUNTIME_API_EVT_ID_hipGetTextureObjectResourceDesc = 123, 
  HIP_RUNTIME_API_EVT_ID_hipGetTextureObjectResourceViewDesc = 124, 
  HIP_RUNTIME_API_EVT_ID_hipGetTextureObjectTextureDesc = 125, 
  HIP_RUNTIME_API_EVT_ID_hipGetTextureReference = 126, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddChildGraphNode = 127, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddDependencies = 128, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddEmptyNode = 129, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddEventRecordNode = 130, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddEventWaitNode = 131, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddHostNode = 132, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddKernelNode = 133, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddMemAllocNode = 134, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddMemFreeNode = 135, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddMemcpyNode = 136, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddMemcpyNode1D = 137, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddMemcpyNodeFromSymbol = 138, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddMemcpyNodeToSymbol = 139, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddMemsetNode = 140, 
  HIP_RUNTIME_API_EVT_ID_hipGraphChildGraphNodeGetGraph = 141, 
  HIP_RUNTIME_API_EVT_ID_hipGraphClone = 142, 
  HIP_RUNTIME_API_EVT_ID_hipGraphCreate = 143, 
  HIP_RUNTIME_API_EVT_ID_hipGraphDebugDotPrint = 144, 
  HIP_RUNTIME_API_EVT_ID_hipGraphDestroy = 145, 
  HIP_RUNTIME_API_EVT_ID_hipGraphDestroyNode = 146, 
  HIP_RUNTIME_API_EVT_ID_hipGraphEventRecordNodeGetEvent = 147, 
  HIP_RUNTIME_API_EVT_ID_hipGraphEventRecordNodeSetEvent = 148, 
  HIP_RUNTIME_API_EVT_ID_hipGraphEventWaitNodeGetEvent = 149, 
  HIP_RUNTIME_API_EVT_ID_hipGraphEventWaitNodeSetEvent = 150, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecChildGraphNodeSetParams = 151, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecDestroy = 152, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecEventRecordNodeSetEvent = 153, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecEventWaitNodeSetEvent = 154, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecHostNodeSetParams = 155, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecKernelNodeSetParams = 156, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecMemcpyNodeSetParams = 157, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecMemcpyNodeSetParams1D = 158, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecMemcpyNodeSetParamsFromSymbol = 159, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecMemcpyNodeSetParamsToSymbol = 160, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecMemsetNodeSetParams = 161, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecUpdate = 162, 
  HIP_RUNTIME_API_EVT_ID_hipGraphGetEdges = 163, 
  HIP_RUNTIME_API_EVT_ID_hipGraphGetNodes = 164, 
  HIP_RUNTIME_API_EVT_ID_hipGraphGetRootNodes = 165, 
  HIP_RUNTIME_API_EVT_ID_hipGraphHostNodeGetParams = 166, 
  HIP_RUNTIME_API_EVT_ID_hipGraphHostNodeSetParams = 167, 
  HIP_RUNTIME_API_EVT_ID_hipGraphInstantiate = 168, 
  HIP_RUNTIME_API_EVT_ID_hipGraphInstantiateWithFlags = 169, 
  HIP_RUNTIME_API_EVT_ID_hipGraphKernelNodeCopyAttributes = 170, 
  HIP_RUNTIME_API_EVT_ID_hipGraphKernelNodeGetAttribute = 171, 
  HIP_RUNTIME_API_EVT_ID_hipGraphKernelNodeGetParams = 172, 
  HIP_RUNTIME_API_EVT_ID_hipGraphKernelNodeSetAttribute = 173, 
  HIP_RUNTIME_API_EVT_ID_hipGraphKernelNodeSetParams = 174, 
  HIP_RUNTIME_API_EVT_ID_hipGraphLaunch = 175, 
  HIP_RUNTIME_API_EVT_ID_hipGraphMemAllocNodeGetParams = 176, 
  HIP_RUNTIME_API_EVT_ID_hipGraphMemFreeNodeGetParams = 177, 
  HIP_RUNTIME_API_EVT_ID_hipGraphMemcpyNodeGetParams = 178, 
  HIP_RUNTIME_API_EVT_ID_hipGraphMemcpyNodeSetParams = 179, 
  HIP_RUNTIME_API_EVT_ID_hipGraphMemcpyNodeSetParams1D = 180, 
  HIP_RUNTIME_API_EVT_ID_hipGraphMemcpyNodeSetParamsFromSymbol = 181, 
  HIP_RUNTIME_API_EVT_ID_hipGraphMemcpyNodeSetParamsToSymbol = 182, 
  HIP_RUNTIME_API_EVT_ID_hipGraphMemsetNodeGetParams = 183, 
  HIP_RUNTIME_API_EVT_ID_hipGraphMemsetNodeSetParams = 184, 
  HIP_RUNTIME_API_EVT_ID_hipGraphNodeFindInClone = 185, 
  HIP_RUNTIME_API_EVT_ID_hipGraphNodeGetDependencies = 186, 
  HIP_RUNTIME_API_EVT_ID_hipGraphNodeGetDependentNodes = 187, 
  HIP_RUNTIME_API_EVT_ID_hipGraphNodeGetEnabled = 188, 
  HIP_RUNTIME_API_EVT_ID_hipGraphNodeGetType = 189, 
  HIP_RUNTIME_API_EVT_ID_hipGraphNodeSetEnabled = 190, 
  HIP_RUNTIME_API_EVT_ID_hipGraphReleaseUserObject = 191, 
  HIP_RUNTIME_API_EVT_ID_hipGraphRemoveDependencies = 192, 
  HIP_RUNTIME_API_EVT_ID_hipGraphRetainUserObject = 193, 
  HIP_RUNTIME_API_EVT_ID_hipGraphUpload = 194, 
  HIP_RUNTIME_API_EVT_ID_hipGraphicsGLRegisterBuffer = 195, 
  HIP_RUNTIME_API_EVT_ID_hipGraphicsGLRegisterImage = 196, 
  HIP_RUNTIME_API_EVT_ID_hipGraphicsMapResources = 197, 
  HIP_RUNTIME_API_EVT_ID_hipGraphicsResourceGetMappedPointer = 198, 
  HIP_RUNTIME_API_EVT_ID_hipGraphicsSubResourceGetMappedArray = 199, 
  HIP_RUNTIME_API_EVT_ID_hipGraphicsUnmapResources = 200, 
  HIP_RUNTIME_API_EVT_ID_hipGraphicsUnregisterResource = 201, 
  HIP_RUNTIME_API_EVT_ID_hipHostAlloc = 202, 
  HIP_RUNTIME_API_EVT_ID_hipHostFree = 203, 
  HIP_RUNTIME_API_EVT_ID_hipHostGetDevicePointer = 204, 
  HIP_RUNTIME_API_EVT_ID_hipHostGetFlags = 205, 
  HIP_RUNTIME_API_EVT_ID_hipHostMalloc = 206, 
  HIP_RUNTIME_API_EVT_ID_hipHostRegister = 207, 
  HIP_RUNTIME_API_EVT_ID_hipHostUnregister = 208, 
  HIP_RUNTIME_API_EVT_ID_hipImportExternalMemory = 209, 
  HIP_RUNTIME_API_EVT_ID_hipImportExternalSemaphore = 210, 
  HIP_RUNTIME_API_EVT_ID_hipInit = 211, 
  HIP_RUNTIME_API_EVT_ID_hipIpcCloseMemHandle = 212, 
  HIP_RUNTIME_API_EVT_ID_hipIpcGetEventHandle = 213, 
  HIP_RUNTIME_API_EVT_ID_hipIpcGetMemHandle = 214, 
  HIP_RUNTIME_API_EVT_ID_hipIpcOpenEventHandle = 215, 
  HIP_RUNTIME_API_EVT_ID_hipIpcOpenMemHandle = 216, 
  HIP_RUNTIME_API_EVT_ID_hipKernelNameRef = 217, 
  HIP_RUNTIME_API_EVT_ID_hipKernelNameRefByPtr = 218, 
  HIP_RUNTIME_API_EVT_ID_hipLaunchByPtr = 219, 
  HIP_RUNTIME_API_EVT_ID_hipLaunchCooperativeKernel = 220, 
  HIP_RUNTIME_API_EVT_ID_hipLaunchCooperativeKernelMultiDevice = 221, 
  HIP_RUNTIME_API_EVT_ID_hipLaunchHostFunc = 222, 
  HIP_RUNTIME_API_EVT_ID_hipLaunchKernel = 223, 
  HIP_RUNTIME_API_EVT_ID_hipMalloc = 224, 
  HIP_RUNTIME_API_EVT_ID_hipMalloc3D = 225, 
  HIP_RUNTIME_API_EVT_ID_hipMalloc3DArray = 226, 
  HIP_RUNTIME_API_EVT_ID_hipMallocArray = 227, 
  HIP_RUNTIME_API_EVT_ID_hipMallocAsync = 228, 
  HIP_RUNTIME_API_EVT_ID_hipMallocFromPoolAsync = 229, 
  HIP_RUNTIME_API_EVT_ID_hipMallocHost = 230, 
  HIP_RUNTIME_API_EVT_ID_hipMallocManaged = 231, 
  HIP_RUNTIME_API_EVT_ID_hipMallocMipmappedArray = 232, 
  HIP_RUNTIME_API_EVT_ID_hipMallocPitch = 233, 
  HIP_RUNTIME_API_EVT_ID_hipMemAddressFree = 234, 
  HIP_RUNTIME_API_EVT_ID_hipMemAddressReserve = 235, 
  HIP_RUNTIME_API_EVT_ID_hipMemAdvise = 236, 
  HIP_RUNTIME_API_EVT_ID_hipMemAllocHost = 237, 
  HIP_RUNTIME_API_EVT_ID_hipMemAllocPitch = 238, 
  HIP_RUNTIME_API_EVT_ID_hipMemCreate = 239, 
  HIP_RUNTIME_API_EVT_ID_hipMemExportToShareableHandle = 240, 
  HIP_RUNTIME_API_EVT_ID_hipMemGetAccess = 241, 
  HIP_RUNTIME_API_EVT_ID_hipMemGetAddressRange = 242, 
  HIP_RUNTIME_API_EVT_ID_hipMemGetAllocationGranularity = 243, 
  HIP_RUNTIME_API_EVT_ID_hipMemGetAllocationPropertiesFromHandle = 244, 
  HIP_RUNTIME_API_EVT_ID_hipMemGetInfo = 245, 
  HIP_RUNTIME_API_EVT_ID_hipMemImportFromShareableHandle = 246, 
  HIP_RUNTIME_API_EVT_ID_hipMemMap = 247, 
  HIP_RUNTIME_API_EVT_ID_hipMemMapArrayAsync = 248, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolCreate = 249, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolDestroy = 250, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolExportPointer = 251, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolExportToShareableHandle = 252, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolGetAccess = 253, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolGetAttribute = 254, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolImportFromShareableHandle = 255, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolImportPointer = 256, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolSetAccess = 257, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolSetAttribute = 258, 
  HIP_RUNTIME_API_EVT_ID_hipMemPoolTrimTo = 259, 
  HIP_RUNTIME_API_EVT_ID_hipMemPrefetchAsync = 260, 
  HIP_RUNTIME_API_EVT_ID_hipMemPtrGetInfo = 261, 
  HIP_RUNTIME_API_EVT_ID_hipMemRangeGetAttribute = 262, 
  HIP_RUNTIME_API_EVT_ID_hipMemRangeGetAttributes = 263, 
  HIP_RUNTIME_API_EVT_ID_hipMemRelease = 264, 
  HIP_RUNTIME_API_EVT_ID_hipMemRetainAllocationHandle = 265, 
  HIP_RUNTIME_API_EVT_ID_hipMemSetAccess = 266, 
  HIP_RUNTIME_API_EVT_ID_hipMemUnmap = 267, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy = 268, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2D = 269, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DAsync = 270, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DFromArray = 271, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DFromArrayAsync = 272, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DToArray = 273, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DToArrayAsync = 274, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy3D = 275, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy3DAsync = 276, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyAsync = 277, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyAtoH = 278, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyDtoD = 279, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyDtoDAsync = 280, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyDtoH = 281, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyDtoHAsync = 282, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyFromArray = 283, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyFromSymbol = 284, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyFromSymbolAsync = 285, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyHtoA = 286, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyHtoD = 287, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyHtoDAsync = 288, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyParam2D = 289, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyParam2DAsync = 290, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyPeer = 291, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyPeerAsync = 292, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyToArray = 293, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyToSymbol = 294, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyToSymbolAsync = 295, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyWithStream = 296, 
  HIP_RUNTIME_API_EVT_ID_hipMemset = 297, 
  HIP_RUNTIME_API_EVT_ID_hipMemset2D = 298, 
  HIP_RUNTIME_API_EVT_ID_hipMemset2DAsync = 299, 
  HIP_RUNTIME_API_EVT_ID_hipMemset3D = 300, 
  HIP_RUNTIME_API_EVT_ID_hipMemset3DAsync = 301, 
  HIP_RUNTIME_API_EVT_ID_hipMemsetAsync = 302, 
  HIP_RUNTIME_API_EVT_ID_hipMemsetD16 = 303, 
  HIP_RUNTIME_API_EVT_ID_hipMemsetD16Async = 304, 
  HIP_RUNTIME_API_EVT_ID_hipMemsetD32 = 305, 
  HIP_RUNTIME_API_EVT_ID_hipMemsetD32Async = 306, 
  HIP_RUNTIME_API_EVT_ID_hipMemsetD8 = 307, 
  HIP_RUNTIME_API_EVT_ID_hipMemsetD8Async = 308, 
  HIP_RUNTIME_API_EVT_ID_hipMipmappedArrayCreate = 309, 
  HIP_RUNTIME_API_EVT_ID_hipMipmappedArrayDestroy = 310, 
  HIP_RUNTIME_API_EVT_ID_hipMipmappedArrayGetLevel = 311, 
  HIP_RUNTIME_API_EVT_ID_hipModuleGetFunction = 312, 
  HIP_RUNTIME_API_EVT_ID_hipModuleGetGlobal = 313, 
  HIP_RUNTIME_API_EVT_ID_hipModuleGetTexRef = 314, 
  HIP_RUNTIME_API_EVT_ID_hipModuleLaunchCooperativeKernel = 315, 
  HIP_RUNTIME_API_EVT_ID_hipModuleLaunchCooperativeKernelMultiDevice = 316, 
  HIP_RUNTIME_API_EVT_ID_hipModuleLaunchKernel = 317, 
  HIP_RUNTIME_API_EVT_ID_hipModuleLoad = 318, 
  HIP_RUNTIME_API_EVT_ID_hipModuleLoadData = 319, 
  HIP_RUNTIME_API_EVT_ID_hipModuleLoadDataEx = 320, 
  HIP_RUNTIME_API_EVT_ID_hipModuleOccupancyMaxActiveBlocksPerMultiprocessor = 321, 
  HIP_RUNTIME_API_EVT_ID_hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags = 322, 
  HIP_RUNTIME_API_EVT_ID_hipModuleOccupancyMaxPotentialBlockSize = 323, 
  HIP_RUNTIME_API_EVT_ID_hipModuleOccupancyMaxPotentialBlockSizeWithFlags = 324, 
  HIP_RUNTIME_API_EVT_ID_hipModuleUnload = 325, 
  HIP_RUNTIME_API_EVT_ID_hipOccupancyMaxActiveBlocksPerMultiprocessor = 326, 
  HIP_RUNTIME_API_EVT_ID_hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags = 327, 
  HIP_RUNTIME_API_EVT_ID_hipOccupancyMaxPotentialBlockSize = 328, 
  HIP_RUNTIME_API_EVT_ID_hipPeekAtLastError = 329, 
  HIP_RUNTIME_API_EVT_ID_hipPointerGetAttribute = 330, 
  HIP_RUNTIME_API_EVT_ID_hipPointerGetAttributes = 331, 
  HIP_RUNTIME_API_EVT_ID_hipPointerSetAttribute = 332, 
  HIP_RUNTIME_API_EVT_ID_hipProfilerStart = 333, 
  HIP_RUNTIME_API_EVT_ID_hipProfilerStop = 334, 
  HIP_RUNTIME_API_EVT_ID_hipRuntimeGetVersion = 335, 
  HIP_RUNTIME_API_EVT_ID_hipSetDevice = 336, 
  HIP_RUNTIME_API_EVT_ID_hipSetDeviceFlags = 337, 
  HIP_RUNTIME_API_EVT_ID_hipSetupArgument = 338, 
  HIP_RUNTIME_API_EVT_ID_hipSignalExternalSemaphoresAsync = 339, 
  HIP_RUNTIME_API_EVT_ID_hipStreamAddCallback = 340, 
  HIP_RUNTIME_API_EVT_ID_hipStreamAttachMemAsync = 341, 
  HIP_RUNTIME_API_EVT_ID_hipStreamBeginCapture = 342, 
  HIP_RUNTIME_API_EVT_ID_hipStreamCreate = 343, 
  HIP_RUNTIME_API_EVT_ID_hipStreamCreateWithFlags = 344, 
  HIP_RUNTIME_API_EVT_ID_hipStreamCreateWithPriority = 345, 
  HIP_RUNTIME_API_EVT_ID_hipStreamDestroy = 346, 
  HIP_RUNTIME_API_EVT_ID_hipStreamEndCapture = 347, 
  HIP_RUNTIME_API_EVT_ID_hipStreamGetCaptureInfo = 348, 
  HIP_RUNTIME_API_EVT_ID_hipStreamGetCaptureInfo_v2 = 349, 
  HIP_RUNTIME_API_EVT_ID_hipStreamGetDevice = 350, 
  HIP_RUNTIME_API_EVT_ID_hipStreamGetFlags = 351, 
  HIP_RUNTIME_API_EVT_ID_hipStreamGetPriority = 352, 
  HIP_RUNTIME_API_EVT_ID_hipStreamIsCapturing = 353, 
  HIP_RUNTIME_API_EVT_ID_hipStreamQuery = 354, 
  HIP_RUNTIME_API_EVT_ID_hipStreamSynchronize = 355, 
  HIP_RUNTIME_API_EVT_ID_hipStreamUpdateCaptureDependencies = 356, 
  HIP_RUNTIME_API_EVT_ID_hipStreamWaitEvent = 357, 
  HIP_RUNTIME_API_EVT_ID_hipStreamWaitValue32 = 358, 
  HIP_RUNTIME_API_EVT_ID_hipStreamWaitValue64 = 359, 
  HIP_RUNTIME_API_EVT_ID_hipStreamWriteValue32 = 360, 
  HIP_RUNTIME_API_EVT_ID_hipStreamWriteValue64 = 361, 
  HIP_RUNTIME_API_EVT_ID_hipTexObjectCreate = 362, 
  HIP_RUNTIME_API_EVT_ID_hipTexObjectDestroy = 363, 
  HIP_RUNTIME_API_EVT_ID_hipTexObjectGetResourceDesc = 364, 
  HIP_RUNTIME_API_EVT_ID_hipTexObjectGetResourceViewDesc = 365, 
  HIP_RUNTIME_API_EVT_ID_hipTexObjectGetTextureDesc = 366, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetAddress = 367, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetAddressMode = 368, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetFilterMode = 369, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetFlags = 370, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetFormat = 371, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetMaxAnisotropy = 372, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetMipMappedArray = 373, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetMipmapFilterMode = 374, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetMipmapLevelBias = 375, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetMipmapLevelClamp = 376, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetAddress = 377, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetAddress2D = 378, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetAddressMode = 379, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetArray = 380, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetBorderColor = 381, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetFilterMode = 382, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetFlags = 383, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetFormat = 384, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetMaxAnisotropy = 385, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetMipmapFilterMode = 386, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetMipmapLevelBias = 387, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetMipmapLevelClamp = 388, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefSetMipmappedArray = 389, 
  HIP_RUNTIME_API_EVT_ID_hipThreadExchangeStreamCaptureMode = 390, 
  HIP_RUNTIME_API_EVT_ID_hipUnbindTexture = 391, 
  HIP_RUNTIME_API_EVT_ID_hipUserObjectCreate = 392, 
  HIP_RUNTIME_API_EVT_ID_hipUserObjectRelease = 393, 
  HIP_RUNTIME_API_EVT_ID_hipUserObjectRetain = 394, 
  HIP_RUNTIME_API_EVT_ID_hipWaitExternalSemaphoresAsync = 395, 
  HIP_RUNTIME_API_EVT_ID_hipCreateChannelDesc = 396, 
  HIP_RUNTIME_API_EVT_ID_hipExtModuleLaunchKernel = 397, 
  HIP_RUNTIME_API_EVT_ID_hipHccModuleLaunchKernel = 398, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy_spt = 399, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyToSymbol_spt = 400, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyFromSymbol_spt = 401, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2D_spt = 402, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DFromArray_spt = 403, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy3D_spt = 404, 
  HIP_RUNTIME_API_EVT_ID_hipMemset_spt = 405, 
  HIP_RUNTIME_API_EVT_ID_hipMemsetAsync_spt = 406, 
  HIP_RUNTIME_API_EVT_ID_hipMemset2D_spt = 407, 
  HIP_RUNTIME_API_EVT_ID_hipMemset2DAsync_spt = 408, 
  HIP_RUNTIME_API_EVT_ID_hipMemset3DAsync_spt = 409, 
  HIP_RUNTIME_API_EVT_ID_hipMemset3D_spt = 410, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyAsync_spt = 411, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy3DAsync_spt = 412, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DAsync_spt = 413, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyFromSymbolAsync_spt = 414, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyToSymbolAsync_spt = 415, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpyFromArray_spt = 416, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DToArray_spt = 417, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DFromArrayAsync_spt = 418, 
  HIP_RUNTIME_API_EVT_ID_hipMemcpy2DToArrayAsync_spt = 419, 
  HIP_RUNTIME_API_EVT_ID_hipStreamQuery_spt = 420, 
  HIP_RUNTIME_API_EVT_ID_hipStreamSynchronize_spt = 421, 
  HIP_RUNTIME_API_EVT_ID_hipStreamGetPriority_spt = 422, 
  HIP_RUNTIME_API_EVT_ID_hipStreamWaitEvent_spt = 423, 
  HIP_RUNTIME_API_EVT_ID_hipStreamGetFlags_spt = 424, 
  HIP_RUNTIME_API_EVT_ID_hipStreamAddCallback_spt = 425, 
  HIP_RUNTIME_API_EVT_ID_hipEventRecord_spt = 426, 
  HIP_RUNTIME_API_EVT_ID_hipLaunchCooperativeKernel_spt = 427, 
  HIP_RUNTIME_API_EVT_ID_hipLaunchKernel_spt = 428, 
  HIP_RUNTIME_API_EVT_ID_hipGraphLaunch_spt = 429, 
  HIP_RUNTIME_API_EVT_ID_hipStreamBeginCapture_spt = 430, 
  HIP_RUNTIME_API_EVT_ID_hipStreamEndCapture_spt = 431, 
  HIP_RUNTIME_API_EVT_ID_hipStreamIsCapturing_spt = 432, 
  HIP_RUNTIME_API_EVT_ID_hipStreamGetCaptureInfo_spt = 433, 
  HIP_RUNTIME_API_EVT_ID_hipStreamGetCaptureInfo_v2_spt = 434, 
  HIP_RUNTIME_API_EVT_ID_hipLaunchHostFunc_spt = 435, 
  HIP_RUNTIME_API_EVT_ID_hipGetStreamDeviceId = 436, 
  HIP_RUNTIME_API_EVT_ID_hipDrvGraphAddMemsetNode = 437, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddExternalSemaphoresWaitNode = 438, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddExternalSemaphoresSignalNode = 439, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExternalSemaphoresSignalNodeSetParams = 440, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExternalSemaphoresWaitNodeSetParams = 441, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExternalSemaphoresSignalNodeGetParams = 442, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExternalSemaphoresWaitNodeGetParams = 443, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecExternalSemaphoresSignalNodeSetParams = 444, 
  HIP_RUNTIME_API_EVT_ID_hipGraphExecExternalSemaphoresWaitNodeSetParams = 445, 
  HIP_RUNTIME_API_EVT_ID_hipGraphAddNode = 446, 
  HIP_RUNTIME_API_EVT_ID_hipGraphInstantiateWithParams = 447, 
  HIP_RUNTIME_API_EVT_ID_hipExtGetLastError = 448, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetBorderColor = 449, 
  HIP_RUNTIME_API_EVT_ID_hipTexRefGetArray = 450, 
  HIP_RUNTIME_API_EVT_ID_hipGetProcAddress = 451, 
  HIP_RUNTIME_API_EVT_ID_hipStreamBeginCaptureToGraph = 452, 
  HIP_RUNTIME_API_EVT_ID_hipGetFuncBySymbol = 453, 
  HIP_RUNTIME_API_EVT_ID_LAST = 453, 

};
typedef union {
  struct {
    dim3* gridDim;
    dim3* blockDim;
    size_t* sharedMem;
    hipStream_t* stream;
  } __hipPopCallConfiguration;
  struct {
    luthier::hip::Dim3 gridDim;
    luthier::hip::Dim3 blockDim;
    size_t sharedMem;
    hipStream_t stream;
  } __hipPushCallConfiguration;
  struct {
    const void* data;
  } __hipRegisterFatBinary;
  struct {
    void** modules;
    const void* hostFunction;
    char* deviceFunction;
    const char* deviceName;
    unsigned int threadLimit;
    uint3* tid;
    uint3* bid;
    dim3* blockDim;
    dim3* gridDim;
    int* wSize;
  } __hipRegisterFunction;
  struct {
    void* hipModule;
    void** pointer;
    void* init_value;
    const char* name;
    size_t size;
    unsigned align;
  } __hipRegisterManagedVar;
  struct {
    void** modules;
    void* var;
    char* hostVar;
    char* deviceVar;
    int type;
    int ext;
  } __hipRegisterSurface;
  struct {
    void** modules;
    void* var;
    char* hostVar;
    char* deviceVar;
    int type;
    int norm;
    int ext;
  } __hipRegisterTexture;
  struct {
    void** modules;
    void* var;
    char* hostVar;
    char* deviceVar;
    int ext;
    size_t size;
    int constant;
    int global;
  } __hipRegisterVar;
  struct {
    void** modules;
  } __hipUnregisterFatBinary;
  struct {
    uint32_t id;
  } hipApiName;
  struct {
    hipArray_t* array;
    const HIP_ARRAY3D_DESCRIPTOR* pAllocateArray;
  } hipArray3DCreate;
  struct {
    HIP_ARRAY3D_DESCRIPTOR* pArrayDescriptor;
    hipArray_t array;
  } hipArray3DGetDescriptor;
  struct {
    hipArray_t* pHandle;
    const HIP_ARRAY_DESCRIPTOR* pAllocateArray;
  } hipArrayCreate;
  struct {
    hipArray_t array;
  } hipArrayDestroy;
  struct {
    HIP_ARRAY_DESCRIPTOR* pArrayDescriptor;
    hipArray_t array;
  } hipArrayGetDescriptor;
  struct {
    hipChannelFormatDesc* desc;
    hipExtent* extent;
    unsigned int* flags;
    hipArray_t array;
  } hipArrayGetInfo;
  struct {
    size_t* offset;
    const textureReference* tex;
    const void* devPtr;
    const hipChannelFormatDesc* desc;
    size_t size;
  } hipBindTexture;
  struct {
    size_t* offset;
    const textureReference* tex;
    const void* devPtr;
    const hipChannelFormatDesc* desc;
    size_t width;
    size_t height;
    size_t pitch;
  } hipBindTexture2D;
  struct {
    const textureReference* tex;
    hipArray_const_t array;
    const hipChannelFormatDesc* desc;
  } hipBindTextureToArray;
  struct {
    const textureReference* tex;
    hipMipmappedArray_const_t mipmappedArray;
    const hipChannelFormatDesc* desc;
  } hipBindTextureToMipmappedArray;
  struct {
    int* device;
    const hipDeviceProp_t* prop;
  } hipChooseDevice;
  struct {
    int* device;
    const hipDeviceProp_tR0000* properties;
  } hipChooseDeviceR0000;
  struct {
    luthier::hip::Dim3 gridDim;
    luthier::hip::Dim3 blockDim;
    size_t sharedMem;
    hipStream_t stream;
  } hipConfigureCall;
  struct {
    hipSurfaceObject_t* pSurfObject;
    const hipResourceDesc* pResDesc;
  } hipCreateSurfaceObject;
  struct {
    hipTextureObject_t* pTexObject;
    const hipResourceDesc* pResDesc;
    const hipTextureDesc* pTexDesc;
    const struct hipResourceViewDesc* pResViewDesc;
  } hipCreateTextureObject;
  struct {
    hipCtx_t* ctx;
    unsigned int flags;
    hipDevice_t device;
  } hipCtxCreate;
  struct {
    hipCtx_t ctx;
  } hipCtxDestroy;
  struct {
    hipCtx_t peerCtx;
  } hipCtxDisablePeerAccess;
  struct {
    hipCtx_t peerCtx;
    unsigned int flags;
  } hipCtxEnablePeerAccess;
  struct {
    hipCtx_t ctx;
    int* apiVersion;
  } hipCtxGetApiVersion;
  struct {
    hipFuncCache_t* cacheConfig;
  } hipCtxGetCacheConfig;
  struct {
    hipCtx_t* ctx;
  } hipCtxGetCurrent;
  struct {
    hipDevice_t* device;
  } hipCtxGetDevice;
  struct {
    unsigned int* flags;
  } hipCtxGetFlags;
  struct {
    hipSharedMemConfig* pConfig;
  } hipCtxGetSharedMemConfig;
  struct {
    hipCtx_t* ctx;
  } hipCtxPopCurrent;
  struct {
    hipCtx_t ctx;
  } hipCtxPushCurrent;
  struct {
    hipFuncCache_t cacheConfig;
  } hipCtxSetCacheConfig;
  struct {
    hipCtx_t ctx;
  } hipCtxSetCurrent;
  struct {
    hipSharedMemConfig config;
  } hipCtxSetSharedMemConfig;
  struct {
  } hipCtxSynchronize;
  struct {
    hipExternalMemory_t extMem;
  } hipDestroyExternalMemory;
  struct {
    hipExternalSemaphore_t extSem;
  } hipDestroyExternalSemaphore;
  struct {
    hipSurfaceObject_t surfaceObject;
  } hipDestroySurfaceObject;
  struct {
    hipTextureObject_t textureObject;
  } hipDestroyTextureObject;
  struct {
    int* canAccessPeer;
    int deviceId;
    int peerDeviceId;
  } hipDeviceCanAccessPeer;
  struct {
    int* major;
    int* minor;
    hipDevice_t device;
  } hipDeviceComputeCapability;
  struct {
    int peerDeviceId;
  } hipDeviceDisablePeerAccess;
  struct {
    int peerDeviceId;
    unsigned int flags;
  } hipDeviceEnablePeerAccess;
  struct {
    hipDevice_t* device;
    int ordinal;
  } hipDeviceGet;
  struct {
    int* pi;
    hipDeviceAttribute_t attr;
    int deviceId;
  } hipDeviceGetAttribute;
  struct {
    int* device;
    const char* pciBusId;
  } hipDeviceGetByPCIBusId;
  struct {
    hipFuncCache_t* cacheConfig;
  } hipDeviceGetCacheConfig;
  struct {
    hipMemPool_t* mem_pool;
    int device;
  } hipDeviceGetDefaultMemPool;
  struct {
    int device;
    hipGraphMemAttributeType attr;
    void* value;
  } hipDeviceGetGraphMemAttribute;
  struct {
    size_t* pValue;
    enum hipLimit_t limit;
  } hipDeviceGetLimit;
  struct {
    hipMemPool_t* mem_pool;
    int device;
  } hipDeviceGetMemPool;
  struct {
    char* name;
    int len;
    hipDevice_t device;
  } hipDeviceGetName;
  struct {
    int* value;
    hipDeviceP2PAttr attr;
    int srcDevice;
    int dstDevice;
  } hipDeviceGetP2PAttribute;
  struct {
    char* pciBusId;
    int len;
    int device;
  } hipDeviceGetPCIBusId;
  struct {
    hipSharedMemConfig* pConfig;
  } hipDeviceGetSharedMemConfig;
  struct {
    int* leastPriority;
    int* greatestPriority;
  } hipDeviceGetStreamPriorityRange;
  struct {
    hipUUID* uuid;
    hipDevice_t device;
  } hipDeviceGetUuid;
  struct {
    int device;
  } hipDeviceGraphMemTrim;
  struct {
    hipDevice_t dev;
    unsigned int* flags;
    int* active;
  } hipDevicePrimaryCtxGetState;
  struct {
    hipDevice_t dev;
  } hipDevicePrimaryCtxRelease;
  struct {
    hipDevice_t dev;
  } hipDevicePrimaryCtxReset;
  struct {
    hipCtx_t* pctx;
    hipDevice_t dev;
  } hipDevicePrimaryCtxRetain;
  struct {
    hipDevice_t dev;
    unsigned int flags;
  } hipDevicePrimaryCtxSetFlags;
  struct {
  } hipDeviceReset;
  struct {
    hipFuncCache_t cacheConfig;
  } hipDeviceSetCacheConfig;
  struct {
    int device;
    hipGraphMemAttributeType attr;
    void* value;
  } hipDeviceSetGraphMemAttribute;
  struct {
    enum hipLimit_t limit;
    size_t value;
  } hipDeviceSetLimit;
  struct {
    int device;
    hipMemPool_t mem_pool;
  } hipDeviceSetMemPool;
  struct {
    hipSharedMemConfig config;
  } hipDeviceSetSharedMemConfig;
  struct {
  } hipDeviceSynchronize;
  struct {
    size_t* bytes;
    hipDevice_t device;
  } hipDeviceTotalMem;
  struct {
    int* driverVersion;
  } hipDriverGetVersion;
  struct {
    hipError_t hipError;
    const char** errorString;
  } hipDrvGetErrorName;
  struct {
    hipError_t hipError;
    const char** errorString;
  } hipDrvGetErrorString;
  struct {
    hipGraphNode_t* phGraphNode;
    hipGraph_t hGraph;
    const hipGraphNode_t* dependencies;
    size_t numDependencies;
    const HIP_MEMCPY3D* copyParams;
    hipCtx_t ctx;
  } hipDrvGraphAddMemcpyNode;
  struct {
    const hip_Memcpy2D* pCopy;
  } hipDrvMemcpy2DUnaligned;
  struct {
    const HIP_MEMCPY3D* pCopy;
  } hipDrvMemcpy3D;
  struct {
    const HIP_MEMCPY3D* pCopy;
    hipStream_t stream;
  } hipDrvMemcpy3DAsync;
  struct {
    unsigned int numAttributes;
    hipPointer_attribute* attributes;
    void** data;
    hipDeviceptr_t ptr;
  } hipDrvPointerGetAttributes;
  struct {
    hipEvent_t* event;
  } hipEventCreate;
  struct {
    hipEvent_t* event;
    unsigned flags;
  } hipEventCreateWithFlags;
  struct {
    hipEvent_t event;
  } hipEventDestroy;
  struct {
    float* ms;
    hipEvent_t start;
    hipEvent_t stop;
  } hipEventElapsedTime;
  struct {
    hipEvent_t event;
  } hipEventQuery;
  struct {
    hipEvent_t event;
    hipStream_t stream;
  } hipEventRecord;
  struct {
    hipEvent_t event;
  } hipEventSynchronize;
  struct {
    int device1;
    int device2;
    uint32_t* linktype;
    uint32_t* hopcount;
  } hipExtGetLinkTypeAndHopCount;
  struct {
    const void* function_address;
    luthier::hip::Dim3 numBlocks;
    luthier::hip::Dim3 dimBlocks;
    void** args;
    size_t sharedMemBytes;
    hipStream_t stream;
    hipEvent_t startEvent;
    hipEvent_t stopEvent;
    int flags;
  } hipExtLaunchKernel;
  struct {
    hipLaunchParams* launchParamsList;
    int numDevices;
    unsigned int flags;
  } hipExtLaunchMultiKernelMultiDevice;
  struct {
    void** ptr;
    size_t sizeBytes;
    unsigned int flags;
  } hipExtMallocWithFlags;
  struct {
    hipStream_t* stream;
    uint32_t cuMaskSize;
    const uint32_t* cuMask;
  } hipExtStreamCreateWithCUMask;
  struct {
    hipStream_t stream;
    uint32_t cuMaskSize;
    uint32_t* cuMask;
  } hipExtStreamGetCUMask;
  struct {
    void** devPtr;
    hipExternalMemory_t extMem;
    const hipExternalMemoryBufferDesc* bufferDesc;
  } hipExternalMemoryGetMappedBuffer;
  struct {
    void* ptr;
  } hipFree;
  struct {
    hipArray_t array;
  } hipFreeArray;
  struct {
    void* dev_ptr;
    hipStream_t stream;
  } hipFreeAsync;
  struct {
    void* ptr;
  } hipFreeHost;
  struct {
    hipMipmappedArray_t mipmappedArray;
  } hipFreeMipmappedArray;
  struct {
    int* value;
    hipFunction_attribute attrib;
    hipFunction_t hfunc;
  } hipFuncGetAttribute;
  struct {
    struct hipFuncAttributes* attr;
    const void* func;
  } hipFuncGetAttributes;
  struct {
    const void* func;
    hipFuncAttribute attr;
    int value;
  } hipFuncSetAttribute;
  struct {
    const void* func;
    hipFuncCache_t config;
  } hipFuncSetCacheConfig;
  struct {
    const void* func;
    hipSharedMemConfig config;
  } hipFuncSetSharedMemConfig;
  struct {
    unsigned int* pHipDeviceCount;
    int* pHipDevices;
    unsigned int hipDeviceCount;
    hipGLDeviceList deviceList;
  } hipGLGetDevices;
  struct {
    hipChannelFormatDesc* desc;
    hipArray_const_t array;
  } hipGetChannelDesc;
  struct {
    int* deviceId;
  } hipGetDevice;
  struct {
    int* count;
  } hipGetDeviceCount;
  struct {
    unsigned int* flags;
  } hipGetDeviceFlags;
  struct {
    hipDeviceProp_tR0600* prop;
    int device;
  } hipGetDevicePropertiesR0600;
  struct {
    hipDeviceProp_tR0000* prop;
    int device;
  } hipGetDevicePropertiesR0000;
  struct {
    hipError_t hip_error;
  } hipGetErrorName;
  struct {
    hipError_t hipError;
  } hipGetErrorString;
  struct {
  } hipGetLastError;
  struct {
    hipArray_t* levelArray;
    hipMipmappedArray_const_t mipmappedArray;
    unsigned int level;
  } hipGetMipmappedArrayLevel;
  struct {
    void** devPtr;
    const void* symbol;
  } hipGetSymbolAddress;
  struct {
    size_t* size;
    const void* symbol;
  } hipGetSymbolSize;
  struct {
    size_t* offset;
    const textureReference* texref;
  } hipGetTextureAlignmentOffset;
  struct {
    hipResourceDesc* pResDesc;
    hipTextureObject_t textureObject;
  } hipGetTextureObjectResourceDesc;
  struct {
    struct hipResourceViewDesc* pResViewDesc;
    hipTextureObject_t textureObject;
  } hipGetTextureObjectResourceViewDesc;
  struct {
    hipTextureDesc* pTexDesc;
    hipTextureObject_t textureObject;
  } hipGetTextureObjectTextureDesc;
  struct {
    const textureReference** texref;
    const void* symbol;
  } hipGetTextureReference;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    hipGraph_t childGraph;
  } hipGraphAddChildGraphNode;
  struct {
    hipGraph_t graph;
    const hipGraphNode_t* from;
    const hipGraphNode_t* to;
    size_t numDependencies;
  } hipGraphAddDependencies;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
  } hipGraphAddEmptyNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    hipEvent_t event;
  } hipGraphAddEventRecordNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    hipEvent_t event;
  } hipGraphAddEventWaitNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    const hipHostNodeParams* pNodeParams;
  } hipGraphAddHostNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    const hipKernelNodeParams* pNodeParams;
  } hipGraphAddKernelNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    hipMemAllocNodeParams* pNodeParams;
  } hipGraphAddMemAllocNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    void* dev_ptr;
  } hipGraphAddMemFreeNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    const hipMemcpy3DParms* pCopyParams;
  } hipGraphAddMemcpyNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    void* dst;
    const void* src;
    size_t count;
    hipMemcpyKind kind;
  } hipGraphAddMemcpyNode1D;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    void* dst;
    const void* symbol;
    size_t count;
    size_t offset;
    hipMemcpyKind kind;
  } hipGraphAddMemcpyNodeFromSymbol;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    const void* symbol;
    const void* src;
    size_t count;
    size_t offset;
    hipMemcpyKind kind;
  } hipGraphAddMemcpyNodeToSymbol;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    const hipMemsetParams* pMemsetParams;
  } hipGraphAddMemsetNode;
  struct {
    hipGraphNode_t node;
    hipGraph_t* pGraph;
  } hipGraphChildGraphNodeGetGraph;
  struct {
    hipGraph_t* pGraphClone;
    hipGraph_t originalGraph;
  } hipGraphClone;
  struct {
    hipGraph_t* pGraph;
    unsigned int flags;
  } hipGraphCreate;
  struct {
    hipGraph_t graph;
    const char* path;
    unsigned int flags;
  } hipGraphDebugDotPrint;
  struct {
    hipGraph_t graph;
  } hipGraphDestroy;
  struct {
    hipGraphNode_t node;
  } hipGraphDestroyNode;
  struct {
    hipGraphNode_t node;
    hipEvent_t* event_out;
  } hipGraphEventRecordNodeGetEvent;
  struct {
    hipGraphNode_t node;
    hipEvent_t event;
  } hipGraphEventRecordNodeSetEvent;
  struct {
    hipGraphNode_t node;
    hipEvent_t* event_out;
  } hipGraphEventWaitNodeGetEvent;
  struct {
    hipGraphNode_t node;
    hipEvent_t event;
  } hipGraphEventWaitNodeSetEvent;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t node;
    hipGraph_t childGraph;
  } hipGraphExecChildGraphNodeSetParams;
  struct {
    hipGraphExec_t graphExec;
  } hipGraphExecDestroy;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t hNode;
    hipEvent_t event;
  } hipGraphExecEventRecordNodeSetEvent;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t hNode;
    hipEvent_t event;
  } hipGraphExecEventWaitNodeSetEvent;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t node;
    const hipHostNodeParams* pNodeParams;
  } hipGraphExecHostNodeSetParams;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t node;
    const hipKernelNodeParams* pNodeParams;
  } hipGraphExecKernelNodeSetParams;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t node;
    hipMemcpy3DParms* pNodeParams;
  } hipGraphExecMemcpyNodeSetParams;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t node;
    void* dst;
    const void* src;
    size_t count;
    hipMemcpyKind kind;
  } hipGraphExecMemcpyNodeSetParams1D;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t node;
    void* dst;
    const void* symbol;
    size_t count;
    size_t offset;
    hipMemcpyKind kind;
  } hipGraphExecMemcpyNodeSetParamsFromSymbol;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t node;
    const void* symbol;
    const void* src;
    size_t count;
    size_t offset;
    hipMemcpyKind kind;
  } hipGraphExecMemcpyNodeSetParamsToSymbol;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t node;
    const hipMemsetParams* pNodeParams;
  } hipGraphExecMemsetNodeSetParams;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraph_t hGraph;
    hipGraphNode_t* hErrorNode_out;
    hipGraphExecUpdateResult* updateResult_out;
  } hipGraphExecUpdate;
  struct {
    hipGraph_t graph;
    hipGraphNode_t* from;
    hipGraphNode_t* to;
    size_t* numEdges;
  } hipGraphGetEdges;
  struct {
    hipGraph_t graph;
    hipGraphNode_t* nodes;
    size_t* numNodes;
  } hipGraphGetNodes;
  struct {
    hipGraph_t graph;
    hipGraphNode_t* pRootNodes;
    size_t* pNumRootNodes;
  } hipGraphGetRootNodes;
  struct {
    hipGraphNode_t node;
    hipHostNodeParams* pNodeParams;
  } hipGraphHostNodeGetParams;
  struct {
    hipGraphNode_t node;
    const hipHostNodeParams* pNodeParams;
  } hipGraphHostNodeSetParams;
  struct {
    hipGraphExec_t* pGraphExec;
    hipGraph_t graph;
    hipGraphNode_t* pErrorNode;
    char* pLogBuffer;
    size_t bufferSize;
  } hipGraphInstantiate;
  struct {
    hipGraphExec_t* pGraphExec;
    hipGraph_t graph;
    unsigned long long flags;
  } hipGraphInstantiateWithFlags;
  struct {
    hipGraphNode_t hSrc;
    hipGraphNode_t hDst;
  } hipGraphKernelNodeCopyAttributes;
  struct {
    hipGraphNode_t hNode;
    hipKernelNodeAttrID attr;
    hipKernelNodeAttrValue* value;
  } hipGraphKernelNodeGetAttribute;
  struct {
    hipGraphNode_t node;
    hipKernelNodeParams* pNodeParams;
  } hipGraphKernelNodeGetParams;
  struct {
    hipGraphNode_t hNode;
    hipKernelNodeAttrID attr;
    const hipKernelNodeAttrValue* value;
  } hipGraphKernelNodeSetAttribute;
  struct {
    hipGraphNode_t node;
    const hipKernelNodeParams* pNodeParams;
  } hipGraphKernelNodeSetParams;
  struct {
    hipGraphExec_t graphExec;
    hipStream_t stream;
  } hipGraphLaunch;
  struct {
    hipGraphNode_t node;
    hipMemAllocNodeParams* pNodeParams;
  } hipGraphMemAllocNodeGetParams;
  struct {
    hipGraphNode_t node;
    void* dev_ptr;
  } hipGraphMemFreeNodeGetParams;
  struct {
    hipGraphNode_t node;
    hipMemcpy3DParms* pNodeParams;
  } hipGraphMemcpyNodeGetParams;
  struct {
    hipGraphNode_t node;
    const hipMemcpy3DParms* pNodeParams;
  } hipGraphMemcpyNodeSetParams;
  struct {
    hipGraphNode_t node;
    void* dst;
    const void* src;
    size_t count;
    hipMemcpyKind kind;
  } hipGraphMemcpyNodeSetParams1D;
  struct {
    hipGraphNode_t node;
    void* dst;
    const void* symbol;
    size_t count;
    size_t offset;
    hipMemcpyKind kind;
  } hipGraphMemcpyNodeSetParamsFromSymbol;
  struct {
    hipGraphNode_t node;
    const void* symbol;
    const void* src;
    size_t count;
    size_t offset;
    hipMemcpyKind kind;
  } hipGraphMemcpyNodeSetParamsToSymbol;
  struct {
    hipGraphNode_t node;
    hipMemsetParams* pNodeParams;
  } hipGraphMemsetNodeGetParams;
  struct {
    hipGraphNode_t node;
    const hipMemsetParams* pNodeParams;
  } hipGraphMemsetNodeSetParams;
  struct {
    hipGraphNode_t* pNode;
    hipGraphNode_t originalNode;
    hipGraph_t clonedGraph;
  } hipGraphNodeFindInClone;
  struct {
    hipGraphNode_t node;
    hipGraphNode_t* pDependencies;
    size_t* pNumDependencies;
  } hipGraphNodeGetDependencies;
  struct {
    hipGraphNode_t node;
    hipGraphNode_t* pDependentNodes;
    size_t* pNumDependentNodes;
  } hipGraphNodeGetDependentNodes;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t hNode;
    unsigned int* isEnabled;
  } hipGraphNodeGetEnabled;
  struct {
    hipGraphNode_t node;
    hipGraphNodeType* pType;
  } hipGraphNodeGetType;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t hNode;
    unsigned int isEnabled;
  } hipGraphNodeSetEnabled;
  struct {
    hipGraph_t graph;
    hipUserObject_t object;
    unsigned int count;
  } hipGraphReleaseUserObject;
  struct {
    hipGraph_t graph;
    const hipGraphNode_t* from;
    const hipGraphNode_t* to;
    size_t numDependencies;
  } hipGraphRemoveDependencies;
  struct {
    hipGraph_t graph;
    hipUserObject_t object;
    unsigned int count;
    unsigned int flags;
  } hipGraphRetainUserObject;
  struct {
    hipGraphExec_t graphExec;
    hipStream_t stream;
  } hipGraphUpload;
  struct {
    hipGraphicsResource** resource;
    GLuint buffer;
    unsigned int flags;
  } hipGraphicsGLRegisterBuffer;
  struct {
    hipGraphicsResource** resource;
    GLuint image;
    GLenum target;
    unsigned int flags;
  } hipGraphicsGLRegisterImage;
  struct {
    int count;
    hipGraphicsResource_t* resources;
    hipStream_t stream;
  } hipGraphicsMapResources;
  struct {
    void** devPtr;
    size_t* size;
    hipGraphicsResource_t resource;
  } hipGraphicsResourceGetMappedPointer;
  struct {
    hipArray_t* array;
    hipGraphicsResource_t resource;
    unsigned int arrayIndex;
    unsigned int mipLevel;
  } hipGraphicsSubResourceGetMappedArray;
  struct {
    int count;
    hipGraphicsResource_t* resources;
    hipStream_t stream;
  } hipGraphicsUnmapResources;
  struct {
    hipGraphicsResource_t resource;
  } hipGraphicsUnregisterResource;
  struct {
    void** ptr;
    size_t size;
    unsigned int flags;
  } hipHostAlloc;
  struct {
    void* ptr;
  } hipHostFree;
  struct {
    void** devPtr;
    void* hstPtr;
    unsigned int flags;
  } hipHostGetDevicePointer;
  struct {
    unsigned int* flagsPtr;
    void* hostPtr;
  } hipHostGetFlags;
  struct {
    void** ptr;
    size_t size;
    unsigned int flags;
  } hipHostMalloc;
  struct {
    void* hostPtr;
    size_t sizeBytes;
    unsigned int flags;
  } hipHostRegister;
  struct {
    void* hostPtr;
  } hipHostUnregister;
  struct {
    hipExternalMemory_t* extMem_out;
    const hipExternalMemoryHandleDesc* memHandleDesc;
  } hipImportExternalMemory;
  struct {
    hipExternalSemaphore_t* extSem_out;
    const hipExternalSemaphoreHandleDesc* semHandleDesc;
  } hipImportExternalSemaphore;
  struct {
    unsigned int flags;
  } hipInit;
  struct {
    void* devPtr;
  } hipIpcCloseMemHandle;
  struct {
    hipIpcEventHandle_t* handle;
    hipEvent_t event;
  } hipIpcGetEventHandle;
  struct {
    hipIpcMemHandle_t* handle;
    void* devPtr;
  } hipIpcGetMemHandle;
  struct {
    hipEvent_t* event;
    hipIpcEventHandle_t handle;
  } hipIpcOpenEventHandle;
  struct {
    void** devPtr;
    hipIpcMemHandle_t handle;
    unsigned int flags;
  } hipIpcOpenMemHandle;
  struct {
    hipFunction_t f;
  } hipKernelNameRef;
  struct {
    const void* hostFunction;
    hipStream_t stream;
  } hipKernelNameRefByPtr;
  struct {
    const void* func;
  } hipLaunchByPtr;
  struct {
    const void* f;
    luthier::hip::Dim3 gridDim;
    luthier::hip::Dim3 blockDimX;
    void** kernelParams;
    unsigned int sharedMemBytes;
    hipStream_t stream;
  } hipLaunchCooperativeKernel;
  struct {
    hipLaunchParams* launchParamsList;
    int numDevices;
    unsigned int flags;
  } hipLaunchCooperativeKernelMultiDevice;
  struct {
    hipStream_t stream;
    hipHostFn_t fn;
    void* userData;
  } hipLaunchHostFunc;
  struct {
    const void* function_address;
    luthier::hip::Dim3 numBlocks;
    luthier::hip::Dim3 dimBlocks;
    void** args;
    size_t sharedMemBytes;
    hipStream_t stream;
  } hipLaunchKernel;
  struct {
    void** ptr;
    size_t size;
  } hipMalloc;
  struct {
    hipPitchedPtr* pitchedDevPtr;
    hipExtent extent;
  } hipMalloc3D;
  struct {
    hipArray_t* array;
    const struct hipChannelFormatDesc* desc;
    struct hipExtent extent;
    unsigned int flags;
  } hipMalloc3DArray;
  struct {
    hipArray_t* array;
    const hipChannelFormatDesc* desc;
    size_t width;
    size_t height;
    unsigned int flags;
  } hipMallocArray;
  struct {
    void** dev_ptr;
    size_t size;
    hipStream_t stream;
  } hipMallocAsync;
  struct {
    void** dev_ptr;
    size_t size;
    hipMemPool_t mem_pool;
    hipStream_t stream;
  } hipMallocFromPoolAsync;
  struct {
    void** ptr;
    size_t size;
  } hipMallocHost;
  struct {
    void** dev_ptr;
    size_t size;
    unsigned int flags;
  } hipMallocManaged;
  struct {
    hipMipmappedArray_t* mipmappedArray;
    const struct hipChannelFormatDesc* desc;
    struct hipExtent extent;
    unsigned int numLevels;
    unsigned int flags;
  } hipMallocMipmappedArray;
  struct {
    void** ptr;
    size_t* pitch;
    size_t width;
    size_t height;
  } hipMallocPitch;
  struct {
    void* devPtr;
    size_t size;
  } hipMemAddressFree;
  struct {
    void** ptr;
    size_t size;
    size_t alignment;
    void* addr;
    unsigned long long flags;
  } hipMemAddressReserve;
  struct {
    const void* dev_ptr;
    size_t count;
    hipMemoryAdvise advice;
    int device;
  } hipMemAdvise;
  struct {
    void** ptr;
    size_t size;
  } hipMemAllocHost;
  struct {
    hipDeviceptr_t* dptr;
    size_t* pitch;
    size_t widthInBytes;
    size_t height;
    unsigned int elementSizeBytes;
  } hipMemAllocPitch;
  struct {
    hipMemGenericAllocationHandle_t* handle;
    size_t size;
    const hipMemAllocationProp* prop;
    unsigned long long flags;
  } hipMemCreate;
  struct {
    void* shareableHandle;
    hipMemGenericAllocationHandle_t handle;
    hipMemAllocationHandleType handleType;
    unsigned long long flags;
  } hipMemExportToShareableHandle;
  struct {
    unsigned long long* flags;
    const hipMemLocation* location;
    void* ptr;
  } hipMemGetAccess;
  struct {
    hipDeviceptr_t* pbase;
    size_t* psize;
    hipDeviceptr_t dptr;
  } hipMemGetAddressRange;
  struct {
    size_t* granularity;
    const hipMemAllocationProp* prop;
    hipMemAllocationGranularity_flags option;
  } hipMemGetAllocationGranularity;
  struct {
    hipMemAllocationProp* prop;
    hipMemGenericAllocationHandle_t handle;
  } hipMemGetAllocationPropertiesFromHandle;
  struct {
    size_t* free;
    size_t* total;
  } hipMemGetInfo;
  struct {
    hipMemGenericAllocationHandle_t* handle;
    void* osHandle;
    hipMemAllocationHandleType shHandleType;
  } hipMemImportFromShareableHandle;
  struct {
    void* ptr;
    size_t size;
    size_t offset;
    hipMemGenericAllocationHandle_t handle;
    unsigned long long flags;
  } hipMemMap;
  struct {
    hipArrayMapInfo* mapInfoList;
    unsigned int count;
    hipStream_t stream;
  } hipMemMapArrayAsync;
  struct {
    hipMemPool_t* mem_pool;
    const hipMemPoolProps* pool_props;
  } hipMemPoolCreate;
  struct {
    hipMemPool_t mem_pool;
  } hipMemPoolDestroy;
  struct {
    hipMemPoolPtrExportData* export_data;
    void* dev_ptr;
  } hipMemPoolExportPointer;
  struct {
    void* shared_handle;
    hipMemPool_t mem_pool;
    hipMemAllocationHandleType handle_type;
    unsigned int flags;
  } hipMemPoolExportToShareableHandle;
  struct {
    hipMemAccessFlags* flags;
    hipMemPool_t mem_pool;
    hipMemLocation* location;
  } hipMemPoolGetAccess;
  struct {
    hipMemPool_t mem_pool;
    hipMemPoolAttr attr;
    void* value;
  } hipMemPoolGetAttribute;
  struct {
    hipMemPool_t* mem_pool;
    void* shared_handle;
    hipMemAllocationHandleType handle_type;
    unsigned int flags;
  } hipMemPoolImportFromShareableHandle;
  struct {
    void** dev_ptr;
    hipMemPool_t mem_pool;
    hipMemPoolPtrExportData* export_data;
  } hipMemPoolImportPointer;
  struct {
    hipMemPool_t mem_pool;
    const hipMemAccessDesc* desc_list;
    size_t count;
  } hipMemPoolSetAccess;
  struct {
    hipMemPool_t mem_pool;
    hipMemPoolAttr attr;
    void* value;
  } hipMemPoolSetAttribute;
  struct {
    hipMemPool_t mem_pool;
    size_t min_bytes_to_hold;
  } hipMemPoolTrimTo;
  struct {
    const void* dev_ptr;
    size_t count;
    int device;
    hipStream_t stream;
  } hipMemPrefetchAsync;
  struct {
    void* ptr;
    size_t* size;
  } hipMemPtrGetInfo;
  struct {
    void* data;
    size_t data_size;
    hipMemRangeAttribute attribute;
    const void* dev_ptr;
    size_t count;
  } hipMemRangeGetAttribute;
  struct {
    void** data;
    size_t* data_sizes;
    hipMemRangeAttribute* attributes;
    size_t num_attributes;
    const void* dev_ptr;
    size_t count;
  } hipMemRangeGetAttributes;
  struct {
    hipMemGenericAllocationHandle_t handle;
  } hipMemRelease;
  struct {
    hipMemGenericAllocationHandle_t* handle;
    void* addr;
  } hipMemRetainAllocationHandle;
  struct {
    void* ptr;
    size_t size;
    const hipMemAccessDesc* desc;
    size_t count;
  } hipMemSetAccess;
  struct {
    void* ptr;
    size_t size;
  } hipMemUnmap;
  struct {
    void* dst;
    const void* src;
    size_t sizeBytes;
    hipMemcpyKind kind;
  } hipMemcpy;
  struct {
    void* dst;
    size_t dpitch;
    const void* src;
    size_t spitch;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
  } hipMemcpy2D;
  struct {
    void* dst;
    size_t dpitch;
    const void* src;
    size_t spitch;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpy2DAsync;
  struct {
    void* dst;
    size_t dpitch;
    hipArray_const_t src;
    size_t wOffset;
    size_t hOffset;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
  } hipMemcpy2DFromArray;
  struct {
    void* dst;
    size_t dpitch;
    hipArray_const_t src;
    size_t wOffset;
    size_t hOffset;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpy2DFromArrayAsync;
  struct {
    hipArray_t dst;
    size_t wOffset;
    size_t hOffset;
    const void* src;
    size_t spitch;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
  } hipMemcpy2DToArray;
  struct {
    hipArray_t dst;
    size_t wOffset;
    size_t hOffset;
    const void* src;
    size_t spitch;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpy2DToArrayAsync;
  struct {
    const struct hipMemcpy3DParms* p;
  } hipMemcpy3D;
  struct {
    const struct hipMemcpy3DParms* p;
    hipStream_t stream;
  } hipMemcpy3DAsync;
  struct {
    void* dst;
    const void* src;
    size_t sizeBytes;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpyAsync;
  struct {
    void* dst;
    hipArray_t srcArray;
    size_t srcOffset;
    size_t count;
  } hipMemcpyAtoH;
  struct {
    hipDeviceptr_t dst;
    hipDeviceptr_t src;
    size_t sizeBytes;
  } hipMemcpyDtoD;
  struct {
    hipDeviceptr_t dst;
    hipDeviceptr_t src;
    size_t sizeBytes;
    hipStream_t stream;
  } hipMemcpyDtoDAsync;
  struct {
    void* dst;
    hipDeviceptr_t src;
    size_t sizeBytes;
  } hipMemcpyDtoH;
  struct {
    void* dst;
    hipDeviceptr_t src;
    size_t sizeBytes;
    hipStream_t stream;
  } hipMemcpyDtoHAsync;
  struct {
    void* dst;
    hipArray_const_t srcArray;
    size_t wOffset;
    size_t hOffset;
    size_t count;
    hipMemcpyKind kind;
  } hipMemcpyFromArray;
  struct {
    void* dst;
    const void* symbol;
    size_t sizeBytes;
    size_t offset;
    hipMemcpyKind kind;
  } hipMemcpyFromSymbol;
  struct {
    void* dst;
    const void* symbol;
    size_t sizeBytes;
    size_t offset;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpyFromSymbolAsync;
  struct {
    hipArray_t dstArray;
    size_t dstOffset;
    const void* srcHost;
    size_t count;
  } hipMemcpyHtoA;
  struct {
    hipDeviceptr_t dst;
    void* src;
    size_t sizeBytes;
  } hipMemcpyHtoD;
  struct {
    hipDeviceptr_t dst;
    void* src;
    size_t sizeBytes;
    hipStream_t stream;
  } hipMemcpyHtoDAsync;
  struct {
    const hip_Memcpy2D* pCopy;
  } hipMemcpyParam2D;
  struct {
    const hip_Memcpy2D* pCopy;
    hipStream_t stream;
  } hipMemcpyParam2DAsync;
  struct {
    void* dst;
    int dstDeviceId;
    const void* src;
    int srcDeviceId;
    size_t sizeBytes;
  } hipMemcpyPeer;
  struct {
    void* dst;
    int dstDeviceId;
    const void* src;
    int srcDevice;
    size_t sizeBytes;
    hipStream_t stream;
  } hipMemcpyPeerAsync;
  struct {
    hipArray_t dst;
    size_t wOffset;
    size_t hOffset;
    const void* src;
    size_t count;
    hipMemcpyKind kind;
  } hipMemcpyToArray;
  struct {
    const void* symbol;
    const void* src;
    size_t sizeBytes;
    size_t offset;
    hipMemcpyKind kind;
  } hipMemcpyToSymbol;
  struct {
    const void* symbol;
    const void* src;
    size_t sizeBytes;
    size_t offset;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpyToSymbolAsync;
  struct {
    void* dst;
    const void* src;
    size_t sizeBytes;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpyWithStream;
  struct {
    void* dst;
    int value;
    size_t sizeBytes;
  } hipMemset;
  struct {
    void* dst;
    size_t pitch;
    int value;
    size_t width;
    size_t height;
  } hipMemset2D;
  struct {
    void* dst;
    size_t pitch;
    int value;
    size_t width;
    size_t height;
    hipStream_t stream;
  } hipMemset2DAsync;
  struct {
    hipPitchedPtr pitchedDevPtr;
    int value;
    hipExtent extent;
  } hipMemset3D;
  struct {
    hipPitchedPtr pitchedDevPtr;
    int value;
    hipExtent extent;
    hipStream_t stream;
  } hipMemset3DAsync;
  struct {
    void* dst;
    int value;
    size_t sizeBytes;
    hipStream_t stream;
  } hipMemsetAsync;
  struct {
    hipDeviceptr_t dest;
    unsigned short value;
    size_t count;
  } hipMemsetD16;
  struct {
    hipDeviceptr_t dest;
    unsigned short value;
    size_t count;
    hipStream_t stream;
  } hipMemsetD16Async;
  struct {
    hipDeviceptr_t dest;
    int value;
    size_t count;
  } hipMemsetD32;
  struct {
    hipDeviceptr_t dst;
    int value;
    size_t count;
    hipStream_t stream;
  } hipMemsetD32Async;
  struct {
    hipDeviceptr_t dest;
    unsigned char value;
    size_t count;
  } hipMemsetD8;
  struct {
    hipDeviceptr_t dest;
    unsigned char value;
    size_t count;
    hipStream_t stream;
  } hipMemsetD8Async;
  struct {
    hipMipmappedArray_t* pHandle;
    HIP_ARRAY3D_DESCRIPTOR* pMipmappedArrayDesc;
    unsigned int numMipmapLevels;
  } hipMipmappedArrayCreate;
  struct {
    hipMipmappedArray_t hMipmappedArray;
  } hipMipmappedArrayDestroy;
  struct {
    hipArray_t* pLevelArray;
    hipMipmappedArray_t hMipMappedArray;
    unsigned int level;
  } hipMipmappedArrayGetLevel;
  struct {
    hipFunction_t* function;
    hipModule_t module;
    const char* kname;
  } hipModuleGetFunction;
  struct {
    hipDeviceptr_t* dptr;
    size_t* bytes;
    hipModule_t hmod;
    const char* name;
  } hipModuleGetGlobal;
  struct {
    textureReference** texRef;
    hipModule_t hmod;
    const char* name;
  } hipModuleGetTexRef;
  struct {
    hipFunction_t f;
    unsigned int gridDimX;
    unsigned int gridDimY;
    unsigned int gridDimZ;
    unsigned int blockDimX;
    unsigned int blockDimY;
    unsigned int blockDimZ;
    unsigned int sharedMemBytes;
    hipStream_t stream;
    void** kernelParams;
  } hipModuleLaunchCooperativeKernel;
  struct {
    hipFunctionLaunchParams* launchParamsList;
    unsigned int numDevices;
    unsigned int flags;
  } hipModuleLaunchCooperativeKernelMultiDevice;
  struct {
    hipFunction_t f;
    unsigned int gridDimX;
    unsigned int gridDimY;
    unsigned int gridDimZ;
    unsigned int blockDimX;
    unsigned int blockDimY;
    unsigned int blockDimZ;
    unsigned int sharedMemBytes;
    hipStream_t stream;
    void** kernelParams;
    void** extra;
  } hipModuleLaunchKernel;
  struct {
    hipModule_t* module;
    const char* fname;
  } hipModuleLoad;
  struct {
    hipModule_t* module;
    const void* image;
  } hipModuleLoadData;
  struct {
    hipModule_t* module;
    const void* image;
    unsigned int numOptions;
    hipJitOption* options;
    void** optionValues;
  } hipModuleLoadDataEx;
  struct {
    int* numBlocks;
    hipFunction_t f;
    int blockSize;
    size_t dynSharedMemPerBlk;
  } hipModuleOccupancyMaxActiveBlocksPerMultiprocessor;
  struct {
    int* numBlocks;
    hipFunction_t f;
    int blockSize;
    size_t dynSharedMemPerBlk;
    unsigned int flags;
  } hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags;
  struct {
    int* gridSize;
    int* blockSize;
    hipFunction_t f;
    size_t dynSharedMemPerBlk;
    int blockSizeLimit;
  } hipModuleOccupancyMaxPotentialBlockSize;
  struct {
    int* gridSize;
    int* blockSize;
    hipFunction_t f;
    size_t dynSharedMemPerBlk;
    int blockSizeLimit;
    unsigned int flags;
  } hipModuleOccupancyMaxPotentialBlockSizeWithFlags;
  struct {
    hipModule_t module;
  } hipModuleUnload;
  struct {
    int* numBlocks;
    const void* f;
    int blockSize;
    size_t dynSharedMemPerBlk;
  } hipOccupancyMaxActiveBlocksPerMultiprocessor;
  struct {
    int* numBlocks;
    const void* f;
    int blockSize;
    size_t dynSharedMemPerBlk;
    unsigned int flags;
  } hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags;
  struct {
    int* gridSize;
    int* blockSize;
    const void* f;
    size_t dynSharedMemPerBlk;
    int blockSizeLimit;
  } hipOccupancyMaxPotentialBlockSize;
  struct {
  } hipPeekAtLastError;
  struct {
    void* data;
    hipPointer_attribute attribute;
    hipDeviceptr_t ptr;
  } hipPointerGetAttribute;
  struct {
    hipPointerAttribute_t* attributes;
    const void* ptr;
  } hipPointerGetAttributes;
  struct {
    const void* value;
    hipPointer_attribute attribute;
    hipDeviceptr_t ptr;
  } hipPointerSetAttribute;
  struct {
  } hipProfilerStart;
  struct {
  } hipProfilerStop;
  struct {
    int* runtimeVersion;
  } hipRuntimeGetVersion;
  struct {
    int deviceId;
  } hipSetDevice;
  struct {
    unsigned flags;
  } hipSetDeviceFlags;
  struct {
    const void* arg;
    size_t size;
    size_t offset;
  } hipSetupArgument;
  struct {
    const hipExternalSemaphore_t* extSemArray;
    const hipExternalSemaphoreSignalParams* paramsArray;
    unsigned int numExtSems;
    hipStream_t stream;
  } hipSignalExternalSemaphoresAsync;
  struct {
    hipStream_t stream;
    hipStreamCallback_t callback;
    void* userData;
    unsigned int flags;
  } hipStreamAddCallback;
  struct {
    hipStream_t stream;
    void* dev_ptr;
    size_t length;
    unsigned int flags;
  } hipStreamAttachMemAsync;
  struct {
    hipStream_t stream;
    hipStreamCaptureMode mode;
  } hipStreamBeginCapture;
  struct {
    hipStream_t* stream;
  } hipStreamCreate;
  struct {
    hipStream_t* stream;
    unsigned int flags;
  } hipStreamCreateWithFlags;
  struct {
    hipStream_t* stream;
    unsigned int flags;
    int priority;
  } hipStreamCreateWithPriority;
  struct {
    hipStream_t stream;
  } hipStreamDestroy;
  struct {
    hipStream_t stream;
    hipGraph_t* pGraph;
  } hipStreamEndCapture;
  struct {
    hipStream_t stream;
    hipStreamCaptureStatus* pCaptureStatus;
    unsigned long long* pId;
  } hipStreamGetCaptureInfo;
  struct {
    hipStream_t stream;
    hipStreamCaptureStatus* captureStatus_out;
    unsigned long long* id_out;
    hipGraph_t* graph_out;
    const hipGraphNode_t** dependencies_out;
    size_t* numDependencies_out;
  } hipStreamGetCaptureInfo_v2;
  struct {
    hipStream_t stream;
    hipDevice_t* device;
  } hipStreamGetDevice;
  struct {
    hipStream_t stream;
    unsigned int* flags;
  } hipStreamGetFlags;
  struct {
    hipStream_t stream;
    int* priority;
  } hipStreamGetPriority;
  struct {
    hipStream_t stream;
    hipStreamCaptureStatus* pCaptureStatus;
  } hipStreamIsCapturing;
  struct {
    hipStream_t stream;
  } hipStreamQuery;
  struct {
    hipStream_t stream;
  } hipStreamSynchronize;
  struct {
    hipStream_t stream;
    hipGraphNode_t* dependencies;
    size_t numDependencies;
    unsigned int flags;
  } hipStreamUpdateCaptureDependencies;
  struct {
    hipStream_t stream;
    hipEvent_t event;
    unsigned int flags;
  } hipStreamWaitEvent;
  struct {
    hipStream_t stream;
    void* ptr;
    uint32_t value;
    unsigned int flags;
    uint32_t mask;
  } hipStreamWaitValue32;
  struct {
    hipStream_t stream;
    void* ptr;
    uint64_t value;
    unsigned int flags;
    uint64_t mask;
  } hipStreamWaitValue64;
  struct {
    hipStream_t stream;
    void* ptr;
    uint32_t value;
    unsigned int flags;
  } hipStreamWriteValue32;
  struct {
    hipStream_t stream;
    void* ptr;
    uint64_t value;
    unsigned int flags;
  } hipStreamWriteValue64;
  struct {
    hipTextureObject_t* pTexObject;
    const HIP_RESOURCE_DESC* pResDesc;
    const HIP_TEXTURE_DESC* pTexDesc;
    const HIP_RESOURCE_VIEW_DESC* pResViewDesc;
  } hipTexObjectCreate;
  struct {
    hipTextureObject_t texObject;
  } hipTexObjectDestroy;
  struct {
    HIP_RESOURCE_DESC* pResDesc;
    hipTextureObject_t texObject;
  } hipTexObjectGetResourceDesc;
  struct {
    HIP_RESOURCE_VIEW_DESC* pResViewDesc;
    hipTextureObject_t texObject;
  } hipTexObjectGetResourceViewDesc;
  struct {
    HIP_TEXTURE_DESC* pTexDesc;
    hipTextureObject_t texObject;
  } hipTexObjectGetTextureDesc;
  struct {
    hipDeviceptr_t* dev_ptr;
    const textureReference* texRef;
  } hipTexRefGetAddress;
  struct {
    enum hipTextureAddressMode* pam;
    const textureReference* texRef;
    int dim;
  } hipTexRefGetAddressMode;
  struct {
    enum hipTextureFilterMode* pfm;
    const textureReference* texRef;
  } hipTexRefGetFilterMode;
  struct {
    unsigned int* pFlags;
    const textureReference* texRef;
  } hipTexRefGetFlags;
  struct {
    hipArray_Format* pFormat;
    int* pNumChannels;
    const textureReference* texRef;
  } hipTexRefGetFormat;
  struct {
    int* pmaxAnsio;
    const textureReference* texRef;
  } hipTexRefGetMaxAnisotropy;
  struct {
    hipMipmappedArray_t* pArray;
    const textureReference* texRef;
  } hipTexRefGetMipMappedArray;
  struct {
    enum hipTextureFilterMode* pfm;
    const textureReference* texRef;
  } hipTexRefGetMipmapFilterMode;
  struct {
    float* pbias;
    const textureReference* texRef;
  } hipTexRefGetMipmapLevelBias;
  struct {
    float* pminMipmapLevelClamp;
    float* pmaxMipmapLevelClamp;
    const textureReference* texRef;
  } hipTexRefGetMipmapLevelClamp;
  struct {
    size_t* ByteOffset;
    textureReference* texRef;
    hipDeviceptr_t dptr;
    size_t bytes;
  } hipTexRefSetAddress;
  struct {
    textureReference* texRef;
    const HIP_ARRAY_DESCRIPTOR* desc;
    hipDeviceptr_t dptr;
    size_t Pitch;
  } hipTexRefSetAddress2D;
  struct {
    textureReference* texRef;
    int dim;
    enum hipTextureAddressMode am;
  } hipTexRefSetAddressMode;
  struct {
    textureReference* tex;
    hipArray_const_t array;
    unsigned int flags;
  } hipTexRefSetArray;
  struct {
    textureReference* texRef;
    float* pBorderColor;
  } hipTexRefSetBorderColor;
  struct {
    textureReference* texRef;
    enum hipTextureFilterMode fm;
  } hipTexRefSetFilterMode;
  struct {
    textureReference* texRef;
    unsigned int Flags;
  } hipTexRefSetFlags;
  struct {
    textureReference* texRef;
    hipArray_Format fmt;
    int NumPackedComponents;
  } hipTexRefSetFormat;
  struct {
    textureReference* texRef;
    unsigned int maxAniso;
  } hipTexRefSetMaxAnisotropy;
  struct {
    textureReference* texRef;
    enum hipTextureFilterMode fm;
  } hipTexRefSetMipmapFilterMode;
  struct {
    textureReference* texRef;
    float bias;
  } hipTexRefSetMipmapLevelBias;
  struct {
    textureReference* texRef;
    float minMipMapLevelClamp;
    float maxMipMapLevelClamp;
  } hipTexRefSetMipmapLevelClamp;
  struct {
    textureReference* texRef;
    struct hipMipmappedArray* mipmappedArray;
    unsigned int Flags;
  } hipTexRefSetMipmappedArray;
  struct {
    hipStreamCaptureMode* mode;
  } hipThreadExchangeStreamCaptureMode;
  struct {
    const textureReference* tex;
  } hipUnbindTexture;
  struct {
    hipUserObject_t* object_out;
    void* ptr;
    hipHostFn_t destroy;
    unsigned int initialRefcount;
    unsigned int flags;
  } hipUserObjectCreate;
  struct {
    hipUserObject_t object;
    unsigned int count;
  } hipUserObjectRelease;
  struct {
    hipUserObject_t object;
    unsigned int count;
  } hipUserObjectRetain;
  struct {
    const hipExternalSemaphore_t* extSemArray;
    const hipExternalSemaphoreWaitParams* paramsArray;
    unsigned int numExtSems;
    hipStream_t stream;
  } hipWaitExternalSemaphoresAsync;
  struct {
    int x;
    int y;
    int z;
    int w;
    hipChannelFormatKind f;
  } hipCreateChannelDesc;
  struct {
    hipFunction_t f;
    uint32_t globalWorkSizeX;
    uint32_t globalWorkSizeY;
    uint32_t globalWorkSizeZ;
    uint32_t localWorkSizeX;
    uint32_t localWorkSizeY;
    uint32_t localWorkSizeZ;
    size_t sharedMemBytes;
    hipStream_t hStream;
    void** kernelParams;
    void** extra;
    hipEvent_t startEvent;
    hipEvent_t stopEvent;
    uint32_t flags;
  } hipExtModuleLaunchKernel;
  struct {
    hipFunction_t f;
    uint32_t globalWorkSizeX;
    uint32_t globalWorkSizeY;
    uint32_t globalWorkSizeZ;
    uint32_t localWorkSizeX;
    uint32_t localWorkSizeY;
    uint32_t localWorkSizeZ;
    size_t sharedMemBytes;
    hipStream_t hStream;
    void** kernelParams;
    void** extra;
    hipEvent_t startEvent;
    hipEvent_t stopEvent;
  } hipHccModuleLaunchKernel;
  struct {
    void* dst;
    const void* src;
    size_t sizeBytes;
    hipMemcpyKind kind;
  } hipMemcpy_spt;
  struct {
    const void* symbol;
    const void* src;
    size_t sizeBytes;
    size_t offset;
    hipMemcpyKind kind;
  } hipMemcpyToSymbol_spt;
  struct {
    void* dst;
    const void* symbol;
    size_t sizeBytes;
    size_t offset;
    hipMemcpyKind kind;
  } hipMemcpyFromSymbol_spt;
  struct {
    void* dst;
    size_t dpitch;
    const void* src;
    size_t spitch;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
  } hipMemcpy2D_spt;
  struct {
    void* dst;
    size_t dpitch;
    hipArray_const_t src;
    size_t wOffset;
    size_t hOffset;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
  } hipMemcpy2DFromArray_spt;
  struct {
    const struct hipMemcpy3DParms* p;
  } hipMemcpy3D_spt;
  struct {
    void* dst;
    int value;
    size_t sizeBytes;
  } hipMemset_spt;
  struct {
    void* dst;
    int value;
    size_t sizeBytes;
    hipStream_t stream;
  } hipMemsetAsync_spt;
  struct {
    void* dst;
    size_t pitch;
    int value;
    size_t width;
    size_t height;
  } hipMemset2D_spt;
  struct {
    void* dst;
    size_t pitch;
    int value;
    size_t width;
    size_t height;
    hipStream_t stream;
  } hipMemset2DAsync_spt;
  struct {
    hipPitchedPtr pitchedDevPtr;
    int value;
    hipExtent extent;
    hipStream_t stream;
  } hipMemset3DAsync_spt;
  struct {
    hipPitchedPtr pitchedDevPtr;
    int value;
    hipExtent extent;
  } hipMemset3D_spt;
  struct {
    void* dst;
    const void* src;
    size_t sizeBytes;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpyAsync_spt;
  struct {
    const hipMemcpy3DParms* p;
    hipStream_t stream;
  } hipMemcpy3DAsync_spt;
  struct {
    void* dst;
    size_t dpitch;
    const void* src;
    size_t spitch;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpy2DAsync_spt;
  struct {
    void* dst;
    const void* symbol;
    size_t sizeBytes;
    size_t offset;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpyFromSymbolAsync_spt;
  struct {
    const void* symbol;
    const void* src;
    size_t sizeBytes;
    size_t offset;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpyToSymbolAsync_spt;
  struct {
    void* dst;
    hipArray_const_t src;
    size_t wOffsetSrc;
    size_t hOffset;
    size_t count;
    hipMemcpyKind kind;
  } hipMemcpyFromArray_spt;
  struct {
    hipArray_t dst;
    size_t wOffset;
    size_t hOffset;
    const void* src;
    size_t spitch;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
  } hipMemcpy2DToArray_spt;
  struct {
    void* dst;
    size_t dpitch;
    hipArray_const_t src;
    size_t wOffsetSrc;
    size_t hOffsetSrc;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpy2DFromArrayAsync_spt;
  struct {
    hipArray_t dst;
    size_t wOffset;
    size_t hOffset;
    const void* src;
    size_t spitch;
    size_t width;
    size_t height;
    hipMemcpyKind kind;
    hipStream_t stream;
  } hipMemcpy2DToArrayAsync_spt;
  struct {
    hipStream_t stream;
  } hipStreamQuery_spt;
  struct {
    hipStream_t stream;
  } hipStreamSynchronize_spt;
  struct {
    hipStream_t stream;
    int* priority;
  } hipStreamGetPriority_spt;
  struct {
    hipStream_t stream;
    hipEvent_t event;
    unsigned int flags;
  } hipStreamWaitEvent_spt;
  struct {
    hipStream_t stream;
    unsigned int* flags;
  } hipStreamGetFlags_spt;
  struct {
    hipStream_t stream;
    hipStreamCallback_t callback;
    void* userData;
    unsigned int flags;
  } hipStreamAddCallback_spt;
  struct {
    hipEvent_t event;
    hipStream_t stream;
  } hipEventRecord_spt;
  struct {
    const void* f;
    luthier::hip::Dim3 gridDim;
    luthier::hip::Dim3 blockDim;
    void** kernelParams;
    uint32_t sharedMemBytes;
    hipStream_t hStream;
  } hipLaunchCooperativeKernel_spt;
  struct {
    const void* function_address;
    luthier::hip::Dim3 numBlocks;
    luthier::hip::Dim3 dimBlocks;
    void** args;
    size_t sharedMemBytes;
    hipStream_t stream;
  } hipLaunchKernel_spt;
  struct {
    hipGraphExec_t graphExec;
    hipStream_t stream;
  } hipGraphLaunch_spt;
  struct {
    hipStream_t stream;
    hipStreamCaptureMode mode;
  } hipStreamBeginCapture_spt;
  struct {
    hipStream_t stream;
    hipGraph_t* pGraph;
  } hipStreamEndCapture_spt;
  struct {
    hipStream_t stream;
    hipStreamCaptureStatus* pCaptureStatus;
  } hipStreamIsCapturing_spt;
  struct {
    hipStream_t stream;
    hipStreamCaptureStatus* pCaptureStatus;
    unsigned long long* pId;
  } hipStreamGetCaptureInfo_spt;
  struct {
    hipStream_t stream;
    hipStreamCaptureStatus* captureStatus_out;
    unsigned long long* id_out;
    hipGraph_t* graph_out;
    const hipGraphNode_t** dependencies_out;
    size_t* numDependencies_out;
  } hipStreamGetCaptureInfo_v2_spt;
  struct {
    hipStream_t stream;
    hipHostFn_t fn;
    void* userData;
  } hipLaunchHostFunc_spt;
  struct {
    hipStream_t stream;
  } hipGetStreamDeviceId;
  struct {
    hipGraphNode_t* phGraphNode;
    hipGraph_t hGraph;
    const hipGraphNode_t* dependencies;
    size_t numDependencies;
    const HIP_MEMSET_NODE_PARAMS* memsetParams;
    hipCtx_t ctx;
  } hipDrvGraphAddMemsetNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    const hipExternalSemaphoreWaitNodeParams* nodeParams;
  } hipGraphAddExternalSemaphoresWaitNode;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    const hipExternalSemaphoreSignalNodeParams* nodeParams;
  } hipGraphAddExternalSemaphoresSignalNode;
  struct {
    hipGraphNode_t hNode;
    const hipExternalSemaphoreSignalNodeParams* nodeParams;
  } hipGraphExternalSemaphoresSignalNodeSetParams;
  struct {
    hipGraphNode_t hNode;
    const hipExternalSemaphoreWaitNodeParams* nodeParams;
  } hipGraphExternalSemaphoresWaitNodeSetParams;
  struct {
    hipGraphNode_t hNode;
    hipExternalSemaphoreSignalNodeParams* params_out;
  } hipGraphExternalSemaphoresSignalNodeGetParams;
  struct {
    hipGraphNode_t hNode;
    hipExternalSemaphoreWaitNodeParams* params_out;
  } hipGraphExternalSemaphoresWaitNodeGetParams;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t hNode;
    const hipExternalSemaphoreSignalNodeParams* nodeParams;
  } hipGraphExecExternalSemaphoresSignalNodeSetParams;
  struct {
    hipGraphExec_t hGraphExec;
    hipGraphNode_t hNode;
    const hipExternalSemaphoreWaitNodeParams* nodeParams;
  } hipGraphExecExternalSemaphoresWaitNodeSetParams;
  struct {
    hipGraphNode_t* pGraphNode;
    hipGraph_t graph;
    const hipGraphNode_t* pDependencies;
    size_t numDependencies;
    hipGraphNodeParams* nodeParams;
  } hipGraphAddNode;
  struct {
    hipGraphExec_t* pGraphExec;
    hipGraph_t graph;
    hipGraphInstantiateParams* instantiateParams;
  } hipGraphInstantiateWithParams;
  struct {
  } hipExtGetLastError;
  struct {
    float* pBorderColor;
    const textureReference* texRef;
  } hipTexRefGetBorderColor;
  struct {
    hipArray_t* pArray;
    const textureReference* texRef;
  } hipTexRefGetArray;
  struct {
    const char* symbol;
    void** pfn;
    int hipVersion;
    uint64_t flags;
    hipDriverProcAddressQueryResult* symbolStatus;
  } hipGetProcAddress;
  struct {
    hipStream_t stream;
    hipGraph_t graph;
    const hipGraphNode_t* dependencies;
    const hipGraphEdgeData* dependencyData;
    size_t numDependencies;
    hipStreamCaptureMode mode;
  } hipStreamBeginCaptureToGraph;
  struct {
    hipFunction_t* functionPtr;
    const void* symbolPtr;
  } hipGetFuncBySymbol;
} ApiEvtArgs;

};



namespace llvm {

template <> struct DenseMapInfo<luthier::hip::ApiEvtID> {
  static inline luthier::hip::ApiEvtID getEmptyKey() {                                        
    return (luthier::hip::ApiEvtID)(DenseMapInfo<std::underlying_type_t<luthier::hip::ApiEvtID>>::getEmptyKey());
  }
  
  static inline luthier::hip::ApiEvtID getTombstoneKey() {
  return (luthier::hip::ApiEvtID)(DenseMapInfo<std::underlying_type_t<luthier::hip::ApiEvtID>>::getTombstoneKey());
  }

  static unsigned getHashValue(const luthier::hip::ApiEvtID &P) {
  return DenseMapInfo<std::underlying_type_t<luthier::hip::ApiEvtID>>::getHashValue(
    static_cast<std::underlying_type<luthier::hip::ApiEvtID>::type>(P));
  }
  
  static bool isEqual(const luthier::hip::ApiEvtID &LHS, const luthier::hip::ApiEvtID &RHS) {
    return static_cast<std::underlying_type<luthier::hip::ApiEvtID>::type>(LHS) ==
           static_cast<std::underlying_type<luthier::hip::ApiEvtID>::type>(RHS);
  }
  
};

};

#endif

// NOLINTEND
