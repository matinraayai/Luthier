# !/usr/bin/env python3
import os

import argparse

import cxxheaderparser.types
from cxxheaderparser.simple import ClassScope, ParsedData, Typedef
import cxxheaderparser.types as cxx_types
from header_preprocessor import parse_header_file
from typing import *


def parse_and_validate_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser("HIP API interception generation script for Luthier")
    parser.add_argument("--hip-api-trace-path", type=str,
                        default="/opt/rocm/include/hip/amd_detail/hip_api_trace.hpp",
                        help="directory of the HIP API Trace header file")
    parser.add_argument("--rocprofiler-api-enum-header-dir", type=str,
                        default="/opt/rocm/include/rocprofiler-sdk/hip/",
                        help="directory of the ROCProfiler HIP API Enums headers")
    parser.add_argument("--hpp-structs-save-path", type=str,
                        default="../include/luthier/hip_trace_api.h",
                        help="location of where the generated C++ header file containing the callback args struct "
                             "and callback enumerators will be saved")
    parser.add_argument("--cpp-compiler-callback-save-path", type=str,
                        default="../src/lib/hip/hip_compiler_intercept.cpp",
                        help="location of where the generated C++ callbacks for the HIP compiler API will be saved")
    parser.add_argument("--cpp-runtime-callback-save-path", type=str,
                        default="../src/lib/hip/hip_runtime_intercept.cpp",
                        help="location of where the generated C++ callbacks for the HIP runtime API will be saved")
    args = parser.parse_args()
    return args


defines = ("ROCPROFILER_EXTERN_C_INIT", "ROCPROFILER_EXTERN_C_FINI")


def parse_hip_functions(phf: ParsedData) -> dict[str, cxx_types.FunctionType]:
    functions = {}
    for f in phf.namespace.typedefs:
        function_name = f.name.removeprefix("t_")
        functions[function_name] = f.type.ptr_to
    return functions


def is_param_dim3_type(p: cxx_types.Parameter) -> bool:
    if isinstance(p.type, cxx_types.Pointer):
        pointer_to = p.type.ptr_to
        while isinstance(pointer_to, cxx_types.Pointer):
            pointer_to = pointer_to.ptr_to
        return pointer_to.typename.segments[0].name == "dim3"
    elif isinstance(p.type, cxx_types.Type):
        return p.type.typename.segments[0].name == "dim3"
    else:
        return False


def get_api_tables(parsed_hip_api_trace_header: ParsedData, api_table_names: List[str]) -> Dict[str, ClassScope]:
    api_tables = {}
    for cls in parsed_hip_api_trace_header.namespace.classes:
        typename = cls.class_decl.typename
        if typename.classkey == "struct" and len(typename.segments) == 1 \
                and typename.segments[0].name in api_table_names:
            api_tables[typename.segments[0].name] = cls
    return api_tables


def generate_callback_file_contents(api_enums, api_table_struct: ClassScope,
                                    functions: dict[str, cxxheaderparser.types.FunctionType],
                                    interceptor_header_file_name: str,
                                    api_table_name: str,
                                    interceptor_name: str,
                                    api_table_getter_func: str,
                                    api_enum_prefix: str):
    callback_defs = [
        # @formatter:off
f"""/* Generated by {os.path.basename(__file__)}. DO NOT EDIT! */
#include "{interceptor_header_file_name}"
#include "luthier/luthier.h"
#include "luthier/types.h"
#include "luthier/hip_trace_api.h"
    
"""
        # @formatter:on
    ]
    for f in api_table_struct.fields:
        # look for functions in the API Tables, not fields (e.g. size)
        # function fields in the API table are defined as pointers to typedefs of their target HIP function
        if isinstance(f.type.typename, cxx_types.PQName) and f.type.typename.segments[0].name != 'size_t':

            # The field of the API Table this function corresponds to (e.g.) hipApiName_fn
            function_api_table_field_name = f.name
            # Name of the function (e.g. hipApiName)
            function_name = function_api_table_field_name.removesuffix("_fn")
            # The hip function representation parsed by cxxheaderparser
            hip_function_cxx: cxx_types.FunctionType = functions[function_name]

            # Format the args for later
            formatted_params = [p.format() for p in hip_function_cxx.parameters]
            # Generate the callback
            return_type = hip_function_cxx.return_type.format()

            callback_defs.append(
                # @formatter:off
f"""static {return_type} {function_name}_callback({", ".join(formatted_params)}) {{
  auto& HipInterceptor = luthier::hip::{interceptor_name}::instance();
  auto ApiId = luthier::hip::{api_enum_prefix}{function_name};
  bool IsUserCallbackEnabled = HipInterceptor.isUserCallbackEnabled(ApiId);
  bool IsInternalCallbackEnabled = HipInterceptor.isInternalCallbackEnabled(ApiId);
  bool ShouldCallback = IsUserCallbackEnabled || IsInternalCallbackEnabled;
  if (ShouldCallback) {{
"""
                # @formatter:on
            )
            if return_type != "void":
                callback_defs.append(f"""    {return_type} Out{{}};\n""")
            callback_defs.append(
                # @formatter:off
"""    auto [HipUserCallback, UserCallbackLock] = HipInterceptor.getUserCallback();
    auto [HipInternalCallback, InternalCallbackLock] = HipInterceptor.getInternalCallback();
    luthier::hip::ApiEvtArgs Args;
"""
                # @formatter:on
            )
            for param in hip_function_cxx.parameters:
                is_dim3_type = is_param_dim3_type(param)
                # Special handling of HIP dim3 arguments, to convert them to rocprofiler dim3
                if is_dim3_type:
                    is_ptr_type = isinstance(param.type, cxx_types.Pointer)
                    field_accessor = "->" if is_ptr_type else "."
                    callback_defs.append(
                        # @formatter:off
f"""    Args.{function_name}.{param.name}{field_accessor}x = {param.name}{field_accessor}x;
    Args.{function_name}.{param.name}{field_accessor}y = {param.name}{field_accessor}y;
    Args.{function_name}.{param.name}{field_accessor}z = {param.name}{field_accessor}z;                    
"""
                        # @formatter:on
                    )
                else:
                    callback_defs.append(
                        f"    Args.{function_name}.{param.name} = {param.name};\n")
            callback_defs.append(
                # @formatter:off
"""    if (IsUserCallbackEnabled)
      (*HipUserCallback)(&Args, luthier::API_EVT_PHASE_BEFORE, ApiId);
    if (IsInternalCallbackEnabled)
      (*HipInternalCallback)(&Args, luthier::API_EVT_PHASE_BEFORE, ApiId);
"""
                    # @formatter:on
            )
            callback_defs.append(
                f'    {"Out =" if return_type != "void" else ""} HipInterceptor.{api_table_getter_func}.'
                f"{function_api_table_field_name}(")

            for i, param in enumerate(hip_function_cxx.parameters):
                is_dim3_type = is_param_dim3_type(param)
                # Dim3 arguments must be passed as an initializer list for conversion to dim3
                if is_dim3_type:
                    is_ptr_type = isinstance(param.type, cxx_types.Pointer)
                    cast_dim3 = f"reinterpret_cast<dim3*>(Args.{function_name}.{param.name})" if is_ptr_type else \
                        f"*reinterpret_cast<dim3*>(&Args.{function_name}.{param.name})"
                    callback_defs.append(cast_dim3)
                else:
                    callback_defs.append(f'Args.{function_name}.{param.name}')
                if i != len(hip_function_cxx.parameters) - 1:
                    callback_defs.append(", ")
            callback_defs.append(");\n")
            callback_defs.append(
                # @formatter:off
f"""    if (IsUserCallbackEnabled)
      (*HipUserCallback)(&Args, luthier::API_EVT_PHASE_AFTER, ApiId);
    if (IsInternalCallbackEnabled)
      (*HipInternalCallback)(&Args, luthier::API_EVT_PHASE_AFTER, ApiId);
    {"return Out;" if return_type != "void" else ""}
  }}
  else {{
"""
                # # @formatter:on
            )
            callback_defs.append(f"    return HipInterceptor.{api_table_getter_func}.{function_api_table_field_name}(")
            for i, param in enumerate(hip_function_cxx.parameters):
                callback_defs.append(param.name)
                if i != len(hip_function_cxx.parameters) - 1:
                    callback_defs.append(", ")
            callback_defs.append(""");
  }
""")
            callback_defs.append("""}

""")

    return callback_defs


def generate_api_id_enums(api_tables, api_names, api_table_names):
    # Create the HIP_API_EVT_ID enums, enumerating all HIP APIs
    callback_enums = [
        f"""/* Generated by {os.path.basename(__file__)}. DO NOT EDIT!*/
#ifndef LUTHIER_HIP_API_TRACE_H
#define LUTHIER_HIP_API_TRACE_H
#include <hip/amd_detail/hip_api_trace.hpp>
#include "luthier/types.h"
#include "luthier/hip_dim3.h"

namespace luthier::hip {{
  
"""]
    for (api_name, api_table_name) in zip(api_names, api_table_names):
        next_enum_idx = 0
        api_table = api_tables[api_table_name]
        # Mark the beginning of the API Table in the enum
        callback_enums.append(
            f"""enum {api_name}ApiEvtID: unsigned int {{
  HIP_{api_name.upper()}_API_EVT_ID_FIRST = 0,
""")
        for f in api_table.fields:
            # Skip the API table size field
            if f.name == "size" or f.type.typename.segments[0].name == "size_t":
                continue
            # Name of the HIP function is the name of the field minus the "_fn" suffix
            function_name = f.name.removesuffix("_fn")
            # Add the function to the enums list
            callback_enums.append(f"""  HIP_{api_name.upper()}_API_EVT_ID_{function_name} = {next_enum_idx}, 
""")
            next_enum_idx += 1
        # Finalize the API EVT ID Enum
        callback_enums.append(f"""  HIP_{api_name.upper()}_API_EVT_ID_LAST = {next_enum_idx - 1}, 
}};

""")
    callback_enums.append("""
""")
    return callback_enums


def generate_wrapper_switch_functions(api_name, api_table_struct: ClassScope,
                                      functions: dict[str, cxxheaderparser.types.FunctionType],
                                      interceptor_header_file_name: str,
                                      api_table_name: str,
                                      interceptor_name: str,
                                      api_table_getter_func: str,
                                      api_enum_prefix: str):
    # Generate wrapper switch functions, which can switch between the real and the wrapper version of each API function
    wrapper_switches = []
    for f in api_table_struct.fields:
        # look for functions in the API Tables, not fields (e.g. size)
        # function fields in the API table are defined as pointers to typedefs of their target HIP function
        if isinstance(f.type.typename, cxx_types.PQName) and f.type.typename.segments[0].name != 'size_t':
            # The field of the API Table this function corresponds to (e.g.) hipApiName_fn
            function_api_table_field_name = f.name
            # Name of the function (e.g. hipApiName)
            function_name = function_api_table_field_name.removesuffix("_fn")

            wrapper_switches.append(
                # @formatter:off
                f"""static void switch_{function_name}_wrapper({api_table_name} *RuntimeApiTable, 
    const {api_table_name} &SavedApiTable, bool State) {{
  if (State)
    RuntimeApiTable->{function_api_table_field_name} = {function_name}_wrapper;
  else
    RuntimeApiTable->{function_api_table_field_name} = SavedApiTable.{function_api_table_field_name};
}}\n\n"""
                # @formatter:off
            )
    return wrapper_switches


def generate_wrapper_check_functions(api_name, api_table_struct: ClassScope,
                                     functions: dict[str, cxxheaderparser.types.FunctionType],
                                     interceptor_header_file_name: str,
                                     api_table_name: str,
                                     interceptor_name: str,
                                     api_table_getter_func: str,
                                     api_enum_prefix: str):
    # Generate wrapper installation functions, which checks whether the wrapper function or the real function
    # is currently installed over the API runtime table
    wrapper_checks = []
    for f in api_table_struct.fields:
        # look for functions in the API Tables, not fields
        # function fields in the API table are defined as pointers to typedefs of their target HIP function
        if isinstance(f.type.typename, cxx_types.PQName) and f.type.typename.segments[0].name != 'size_t':
            # The field of the API Table this function corresponds to (e.g.) hipApiName_fn
            function_api_table_field_name = f.name
            # Name of the function (e.g. hipApiName)
            function_name = function_api_table_field_name.removesuffix("_fn")
            wrapper_checks.append(
                # @formatter:off
                f"""static bool is_{function_name}_wrapper_installed({api_table_name} *RuntimeApiTable) {{
  return RuntimeApiTable->{function_api_table_field_name} == {function_name}_wrapper;
}}\n\n"""
                # @formatter:off
            )
    return wrapper_checks


def generate_wrapper_switch_functions_map(api_name, api_table_struct: ClassScope,
                                          functions: dict[str, cxxheaderparser.types.FunctionType],
                                          interceptor_header_file_name: str,
                                          api_table_name: str,
                                          interceptor_name: str,
                                          api_table_getter_func: str,
                                          api_enum_prefix: str):
    # Generate a static const mapping between the API IDs and the switch wrapper functions
    # This is used to switch between wrappers and reals for each the API IDs
    switch_functions_map = [f"static const llvm::DenseMap<luthier::hip::{api_name}ApiEvtID, "
                            f"std::function<void({api_table_name} *, const {api_table_name} &, bool)>> "
                            f"Hip{api_name}WrapperSwitchFunctionsMap {{\n"]
    for f in api_table_struct.fields:
        # look for functions in the API Tables, not fields
        # function fields in the API table are defined as pointers to typedefs of their target HIP function
        if isinstance(f.type.typename, cxx_types.PQName) and f.type.typename.segments[0].name != 'size_t':
            # The field of the API Table this function corresponds to (e.g.) hipApiName_fn
            function_api_table_field_name = f.name
            # Name of the function (e.g. hipApiName)
            function_name = function_api_table_field_name.removesuffix("_fn")
            switch_functions_map.append(f"  {{luthier::hsa::HSA_API_EVT_ID_{function_name}, "
                                        f"switch_{function_name}_wrapper}},\n")
    switch_functions_map.append("};")
    return switch_functions_map


def generate_wrapper_check_functions_map(api_name, api_table_struct: ClassScope,
                                         functions: dict[str, cxxheaderparser.types.FunctionType],
                                         interceptor_header_file_name: str,
                                         api_table_name: str,
                                         interceptor_name: str,
                                         api_table_getter_func: str,
                                         api_enum_prefix: str):
    # Generate a static const mapping between the API IDs and the wrapper installation check functions
    # This is used to confirm wrapper installation status of each API ID
    wrapper_check_functions_map = [f"static const llvm::DenseMap<luthier::hip::{api_name}ApiEvtID, "
                                   f"std::function<bool({api_table_name} *)>> "
                                   f"Hip{api_name}WrapperInstallationCheckFunctionsMap {{\n"]
    for f in api_table_struct.fields:
        # look for functions in the API Tables, not fields
        # function fields in the API table are defined as pointers to typedefs of their target HIP function
        if isinstance(f.type.typename, cxx_types.PQName) and f.type.typename.segments[0].name != 'size_t':
            # The field of the API Table this function corresponds to (e.g.) hipApiName_fn
            function_api_table_field_name = f.name
            # Name of the function (e.g. hipApiName)
            function_name = function_api_table_field_name.removesuffix("_fn")
            wrapper_check_functions_map.append(f"  {{luthier::hsa::HSA_API_EVT_ID_{function_name}, "
                                               f"is_{function_name}_wrapper_installed}},\n")
    wrapper_check_functions_map.append("};")

def generate_wrapper_enable_disable_functions(api_name, api_table_struct: ClassScope,
                                              functions: dict[str, cxxheaderparser.types.FunctionType],
                                              interceptor_header_file_name: str,
                                              api_table_name: str,
                                              interceptor_name: str,
                                              api_table_getter_func: str,
                                              api_enum_prefix: str):
    # Generate enable/disable callback functions for the interceptor
    enable_disable_funcs = f"""
bool luthier::hip::{interceptor_name}::enableUserCallback({api_name}ApiEvtID Op) {{
  if (!IsRuntimeApiTableFrozen)
    Hip{api_name}WrapperSwitchFunctionsMap.at(Op)(RuntimeApiTable, SavedRuntimeApiTable, true);
  else if (!Hip{api_name}InstallationCheckFunctionsMap.at(Op)(RuntimeApiTable))
    return false;
  EnabledUserOps.insert(Op);
  return true;
}}

void luthier::hsa::HsaRuntimeInterceptor::disableUserCallback(ApiEvtID Op) {{
  EnabledUserOps.erase(Op);
  if (!IsRuntimeApiTableFrozen && !EnabledInternalOps.contains(Op))
    HsaWrapperSwitchFunctionsMap.at(Op)(RuntimeApiTable, SavedRuntimeApiTable, false);
}}

bool luthier::hsa::HsaRuntimeInterceptor::enableInternalCallback(ApiEvtID Op) {{
  if (!IsRuntimeApiTableFrozen)
    HsaWrapperSwitchFunctionsMap.at(Op)(RuntimeApiTable, SavedRuntimeApiTable, true);
  else if (!HsaWrapperInstallationCheckFunctionsMap.at(Op)(RuntimeApiTable))
    return false;
  EnabledInternalOps.insert(Op);
  return true;
}}

void luthier::hsa::HsaRuntimeInterceptor::disableInternalCallback(ApiEvtID Op) {{
  EnabledInternalOps.erase(Op);
  if (!EnabledUserOps.contains(Op))
    HsaWrapperSwitchFunctionsMap.at(Op)(RuntimeApiTable, SavedRuntimeApiTable, false);
}}"""
    return enable_disable_funcs


def generate_api_args_struct(api_tables, api_names, api_table_names, hip_functions):
    # Create a union struct containing the arguments to all HIP APIs used in Luthier
    callback_arguments_struct = ["""typedef union {
"""
                                 ]
    for (api_name, api_table_name) in zip(api_names, api_table_names):
        api_table = api_tables[api_table_name]
        for f in api_table.fields:
            # Skip the API table size field
            if f.name == "size" or f.type.typename.segments[0].name == "size_t":
                continue
            # Name of the HIP function is the name of the field minus the "_fn" suffix
            function_name = f.name.removesuffix("_fn")
            # The hsa function representation parsed by cxxheaderparser
            hsa_function_cxx = hip_functions[function_name]
            # Format the args for later

            formatted_params = [
                p.format().replace("dim3", "luthier::hip::Dim3").replace("const hipFunction_t", "hipFunction_t") for p
                in hsa_function_cxx.parameters]
            # Generate the argument struct field
            callback_arguments_struct.append("""  struct {
""")
            for p in formatted_params:
                callback_arguments_struct.append(f"""    {p};
""")
            callback_arguments_struct.append(f"""  }} {function_name};
""")
    callback_arguments_struct.append("""} ApiEvtArgs;

};


#endif
""")
    return callback_arguments_struct


def main():
    # Name of the API tables to capture in HIP
    api_table_names = ["HipCompilerDispatchTable", "HipDispatchTable"]
    # Name of the HIP APIs
    api_names = ["Compiler", "Runtime"]

    args = parse_and_validate_args()
    # Parse the Runtime API table enumerators from the runtime_api_id.h in ROCProfiler
    runtime_api_enums = parse_header_file(os.path.join(args.rocprofiler_api_enum_header_dir, "runtime_api_id.h"),
                                          defines).namespace.enums[0]
    # Parse the Compiler API table enumerators from the compiler_api_id.h in ROCProfiler
    compiler_api_enums = parse_header_file(os.path.join(args.rocprofiler_api_enum_header_dir, "compiler_api_id.h"),
                                           defines).namespace.enums[0]
    # Parse the hip_api_trace.hpp, which contains typedefs for each function in the API tables + the API tables
    # themselves
    parsed_hip_api_trace_header = parse_header_file(args.hip_api_trace_path, defines)
    # Map between the name of the function (e.g. hip_init) to its cxxheaderparser Function type
    hip_functions = parse_hip_functions(parsed_hip_api_trace_header)

    # Parse the API tables in hip_api_trace.hpp
    api_tables = get_api_tables(parsed_hip_api_trace_header, api_table_names)

    callback_enums = generate_api_id_enums(api_tables, api_names, api_table_names)
    callback_args_struct = generate_api_args_struct(api_tables, api_names, api_table_names, hip_functions)
    with open(args.hpp_structs_save_path, "w") as f:
        f.writelines("// NOLINTBEGIN\n")
        f.writelines(callback_enums)
        f.writelines(callback_args_struct)
        f.writelines("\n// NOLINTEND\n")

    # Generate the Compiler API callbacks file =========================================================================
    compiler_cpp_file_contents = generate_callback_file_contents(compiler_api_enums,
                                                                 api_tables["HipCompilerDispatchTable"],
                                                                 hip_functions,
                                                                 "hip/HipCompilerApiInterceptor.hpp",
                                                                 "HipCompilerDispatchTable",
                                                                 "HipCompilerApiInterceptor",
                                                                 "getSavedApiTableContainer()",
                                                                 "HIP_COMPILER_API_EVT_ID_")

    runtime_cpp_file_contents = generate_callback_file_contents(runtime_api_enums,
                                                                api_tables["HipDispatchTable"],
                                                                hip_functions,
                                                                "hip/HipRuntimeApiInterceptor.hpp",
                                                                "HipDispatchTables",
                                                                "HipRuntimeApiInterceptor",
                                                                "getSavedApiTableContainer()",
                                                                "HIP_RUNTIME_API_EVT_ID_")

    with open(args.cpp_compiler_callback_save_path, "w") as f:
        f.writelines("// NOLINTBEGIN\n")
        f.writelines(compiler_cpp_file_contents)
        f.writelines("\n// NOLINTEND\n")

    with open(args.cpp_runtime_callback_save_path, "w") as f:
        f.writelines("// NOLINTBEGIN\n")
        f.writelines(runtime_cpp_file_contents)
        f.writelines("\n// NOLINTEND\n")


if __name__ == "__main__":
    main()
